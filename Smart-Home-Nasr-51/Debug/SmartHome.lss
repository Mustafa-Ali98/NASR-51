
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000021c  00800060  000014ce  00001562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080027c  0080027c  0000177e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c85  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e64  00000000  00000000  000056d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019fc  00000000  00000000  00006535  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  00007f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d3  00000000  00000000  000083b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001deb  00000000  00000000  00008c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000aa6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 04 	call	0x8a4	; 0x8a4 <main>
      8a:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include "BIT_MATH.h"
#include "ATMEGA32_REG.h"
#include "ADC_interface.h"
void ADC_init(void)
{
	SET_BIT(ADMUX,6);
      92:	87 b1       	in	r24, 0x07	; 7
      94:	80 64       	ori	r24, 0x40	; 64
      96:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);
      98:	87 b1       	in	r24, 0x07	; 7
      9a:	8f 77       	andi	r24, 0x7F	; 127
      9c:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,5);
      9e:	87 b1       	in	r24, 0x07	; 7
      a0:	8f 7d       	andi	r24, 0xDF	; 223
      a2:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,7);
      a4:	86 b1       	in	r24, 0x06	; 6
      a6:	80 68       	ori	r24, 0x80	; 128
      a8:	86 b9       	out	0x06, r24	; 6
	CLR_BIT(ADCSRA,5);
      aa:	86 b1       	in	r24, 0x06	; 6
      ac:	8f 7d       	andi	r24, 0xDF	; 223
      ae:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,0);
      b0:	86 b1       	in	r24, 0x06	; 6
      b2:	81 60       	ori	r24, 0x01	; 1
      b4:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);
      b6:	86 b1       	in	r24, 0x06	; 6
      b8:	82 60       	ori	r24, 0x02	; 2
      ba:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
      bc:	86 b1       	in	r24, 0x06	; 6
      be:	84 60       	ori	r24, 0x04	; 4
      c0:	86 b9       	out	0x06, r24	; 6
      c2:	08 95       	ret

000000c4 <ADC_getDigital>:
}

void ADC_getDigital(u8 ChannelNum, u16* DigitalValue)
{
	ADMUX &= 0b11100000;//clear five bits
      c4:	97 b1       	in	r25, 0x07	; 7
      c6:	90 7e       	andi	r25, 0xE0	; 224
      c8:	97 b9       	out	0x07, r25	; 7
	ADMUX |= ChannelNum;
      ca:	97 b1       	in	r25, 0x07	; 7
      cc:	89 2b       	or	r24, r25
      ce:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,6);
      d0:	86 b1       	in	r24, 0x06	; 6
      d2:	80 64       	ori	r24, 0x40	; 64
      d4:	86 b9       	out	0x06, r24	; 6
	while(0==GET_BIT(ADCSRA,4));
      d6:	34 9b       	sbis	0x06, 4	; 6
      d8:	fe cf       	rjmp	.-4      	; 0xd6 <ADC_getDigital+0x12>
	
	SET_BIT(ADCSRA,6);
      da:	86 b1       	in	r24, 0x06	; 6
      dc:	80 64       	ori	r24, 0x40	; 64
      de:	86 b9       	out	0x06, r24	; 6
	* DigitalValue=ADC_u16 ;
      e0:	84 b1       	in	r24, 0x04	; 4
      e2:	95 b1       	in	r25, 0x05	; 5
      e4:	fb 01       	movw	r30, r22
      e6:	91 83       	std	Z+1, r25	; 0x01
      e8:	80 83       	st	Z, r24
      ea:	08 95       	ret

000000ec <DIO_setPinDeriction>:
		case DIO_PORTC:
		TOG_BIT(PORTC,PinId);
		break;
		
		case DIO_PORTD:
		TOG_BIT(PORTD,PinId);
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	11 f1       	breq	.+68     	; 0x134 <DIO_setPinDeriction+0x48>
      f0:	30 f0       	brcs	.+12     	; 0xfe <DIO_setPinDeriction+0x12>
      f2:	82 30       	cpi	r24, 0x02	; 2
      f4:	d1 f1       	breq	.+116    	; 0x16a <DIO_setPinDeriction+0x7e>
      f6:	83 30       	cpi	r24, 0x03	; 3
      f8:	09 f4       	brne	.+2      	; 0xfc <DIO_setPinDeriction+0x10>
      fa:	52 c0       	rjmp	.+164    	; 0x1a0 <DIO_setPinDeriction+0xb4>
      fc:	08 95       	ret
      fe:	41 30       	cpi	r20, 0x01	; 1
     100:	59 f4       	brne	.+22     	; 0x118 <DIO_setPinDeriction+0x2c>
     102:	2a b3       	in	r18, 0x1a	; 26
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_setPinDeriction+0x22>
     10a:	88 0f       	add	r24, r24
     10c:	99 1f       	adc	r25, r25
     10e:	6a 95       	dec	r22
     110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_setPinDeriction+0x1e>
     112:	82 2b       	or	r24, r18
     114:	8a bb       	out	0x1a, r24	; 26
     116:	08 95       	ret
     118:	41 11       	cpse	r20, r1
     11a:	5c c0       	rjmp	.+184    	; 0x1d4 <DIO_setPinDeriction+0xe8>
     11c:	2a b3       	in	r18, 0x1a	; 26
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_setPinDeriction+0x3c>
     124:	88 0f       	add	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	6a 95       	dec	r22
     12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_setPinDeriction+0x38>
     12c:	80 95       	com	r24
     12e:	82 23       	and	r24, r18
     130:	8a bb       	out	0x1a, r24	; 26
     132:	08 95       	ret
     134:	41 30       	cpi	r20, 0x01	; 1
     136:	59 f4       	brne	.+22     	; 0x14e <DIO_setPinDeriction+0x62>
     138:	27 b3       	in	r18, 0x17	; 23
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_setPinDeriction+0x58>
     140:	88 0f       	add	r24, r24
     142:	99 1f       	adc	r25, r25
     144:	6a 95       	dec	r22
     146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_setPinDeriction+0x54>
     148:	82 2b       	or	r24, r18
     14a:	87 bb       	out	0x17, r24	; 23
     14c:	08 95       	ret
     14e:	41 11       	cpse	r20, r1
     150:	41 c0       	rjmp	.+130    	; 0x1d4 <DIO_setPinDeriction+0xe8>
     152:	27 b3       	in	r18, 0x17	; 23
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_setPinDeriction+0x72>
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	6a 95       	dec	r22
     160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_setPinDeriction+0x6e>
     162:	80 95       	com	r24
     164:	82 23       	and	r24, r18
     166:	87 bb       	out	0x17, r24	; 23
     168:	08 95       	ret
     16a:	41 30       	cpi	r20, 0x01	; 1
     16c:	59 f4       	brne	.+22     	; 0x184 <DIO_setPinDeriction+0x98>
     16e:	24 b3       	in	r18, 0x14	; 20
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_setPinDeriction+0x8e>
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	6a 95       	dec	r22
     17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_setPinDeriction+0x8a>
     17e:	82 2b       	or	r24, r18
     180:	84 bb       	out	0x14, r24	; 20
     182:	08 95       	ret
     184:	41 11       	cpse	r20, r1
     186:	26 c0       	rjmp	.+76     	; 0x1d4 <DIO_setPinDeriction+0xe8>
     188:	24 b3       	in	r18, 0x14	; 20
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_setPinDeriction+0xa8>
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	6a 95       	dec	r22
     196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_setPinDeriction+0xa4>
     198:	80 95       	com	r24
     19a:	82 23       	and	r24, r18
     19c:	84 bb       	out	0x14, r24	; 20
     19e:	08 95       	ret
     1a0:	41 30       	cpi	r20, 0x01	; 1
     1a2:	59 f4       	brne	.+22     	; 0x1ba <DIO_setPinDeriction+0xce>
     1a4:	21 b3       	in	r18, 0x11	; 17
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_setPinDeriction+0xc4>
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	6a 95       	dec	r22
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_setPinDeriction+0xc0>
     1b4:	82 2b       	or	r24, r18
     1b6:	81 bb       	out	0x11, r24	; 17
     1b8:	08 95       	ret
     1ba:	41 11       	cpse	r20, r1
     1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <DIO_setPinDeriction+0xe8>
     1be:	21 b3       	in	r18, 0x11	; 17
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_setPinDeriction+0xde>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_setPinDeriction+0xda>
     1ce:	80 95       	com	r24
     1d0:	82 23       	and	r24, r18
     1d2:	81 bb       	out	0x11, r24	; 17
     1d4:	08 95       	ret

000001d6 <DIO_setPinValue>:
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	11 f1       	breq	.+68     	; 0x21e <DIO_setPinValue+0x48>
     1da:	30 f0       	brcs	.+12     	; 0x1e8 <DIO_setPinValue+0x12>
     1dc:	82 30       	cpi	r24, 0x02	; 2
     1de:	d1 f1       	breq	.+116    	; 0x254 <DIO_setPinValue+0x7e>
     1e0:	83 30       	cpi	r24, 0x03	; 3
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_setPinValue+0x10>
     1e4:	52 c0       	rjmp	.+164    	; 0x28a <DIO_setPinValue+0xb4>
     1e6:	08 95       	ret
     1e8:	41 30       	cpi	r20, 0x01	; 1
     1ea:	59 f4       	brne	.+22     	; 0x202 <DIO_setPinValue+0x2c>
     1ec:	2b b3       	in	r18, 0x1b	; 27
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_setPinValue+0x22>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	6a 95       	dec	r22
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_setPinValue+0x1e>
     1fc:	82 2b       	or	r24, r18
     1fe:	8b bb       	out	0x1b, r24	; 27
     200:	08 95       	ret
     202:	41 11       	cpse	r20, r1
     204:	5c c0       	rjmp	.+184    	; 0x2be <DIO_setPinValue+0xe8>
     206:	2b b3       	in	r18, 0x1b	; 27
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_setPinValue+0x3c>
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	6a 95       	dec	r22
     214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_setPinValue+0x38>
     216:	80 95       	com	r24
     218:	82 23       	and	r24, r18
     21a:	8b bb       	out	0x1b, r24	; 27
     21c:	08 95       	ret
     21e:	41 30       	cpi	r20, 0x01	; 1
     220:	59 f4       	brne	.+22     	; 0x238 <DIO_setPinValue+0x62>
     222:	28 b3       	in	r18, 0x18	; 24
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_setPinValue+0x58>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_setPinValue+0x54>
     232:	82 2b       	or	r24, r18
     234:	88 bb       	out	0x18, r24	; 24
     236:	08 95       	ret
     238:	41 11       	cpse	r20, r1
     23a:	41 c0       	rjmp	.+130    	; 0x2be <DIO_setPinValue+0xe8>
     23c:	28 b3       	in	r18, 0x18	; 24
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_setPinValue+0x72>
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	6a 95       	dec	r22
     24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_setPinValue+0x6e>
     24c:	80 95       	com	r24
     24e:	82 23       	and	r24, r18
     250:	88 bb       	out	0x18, r24	; 24
     252:	08 95       	ret
     254:	41 30       	cpi	r20, 0x01	; 1
     256:	59 f4       	brne	.+22     	; 0x26e <DIO_setPinValue+0x98>
     258:	25 b3       	in	r18, 0x15	; 21
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_setPinValue+0x8e>
     260:	88 0f       	add	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	6a 95       	dec	r22
     266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_setPinValue+0x8a>
     268:	82 2b       	or	r24, r18
     26a:	85 bb       	out	0x15, r24	; 21
     26c:	08 95       	ret
     26e:	41 11       	cpse	r20, r1
     270:	26 c0       	rjmp	.+76     	; 0x2be <DIO_setPinValue+0xe8>
     272:	25 b3       	in	r18, 0x15	; 21
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_setPinValue+0xa8>
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	6a 95       	dec	r22
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_setPinValue+0xa4>
     282:	80 95       	com	r24
     284:	82 23       	and	r24, r18
     286:	85 bb       	out	0x15, r24	; 21
     288:	08 95       	ret
     28a:	41 30       	cpi	r20, 0x01	; 1
     28c:	59 f4       	brne	.+22     	; 0x2a4 <DIO_setPinValue+0xce>
     28e:	22 b3       	in	r18, 0x12	; 18
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_setPinValue+0xc4>
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	6a 95       	dec	r22
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_setPinValue+0xc0>
     29e:	82 2b       	or	r24, r18
     2a0:	82 bb       	out	0x12, r24	; 18
     2a2:	08 95       	ret
     2a4:	41 11       	cpse	r20, r1
     2a6:	0b c0       	rjmp	.+22     	; 0x2be <DIO_setPinValue+0xe8>
     2a8:	22 b3       	in	r18, 0x12	; 18
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_setPinValue+0xde>
     2b0:	88 0f       	add	r24, r24
     2b2:	99 1f       	adc	r25, r25
     2b4:	6a 95       	dec	r22
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_setPinValue+0xda>
     2b8:	80 95       	com	r24
     2ba:	82 23       	and	r24, r18
     2bc:	82 bb       	out	0x12, r24	; 18
     2be:	08 95       	ret

000002c0 <DIO_getPinValue>:
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	89 f0       	breq	.+34     	; 0x2e6 <DIO_getPinValue+0x26>
     2c4:	28 f0       	brcs	.+10     	; 0x2d0 <DIO_getPinValue+0x10>
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	c9 f0       	breq	.+50     	; 0x2fc <DIO_getPinValue+0x3c>
     2ca:	83 30       	cpi	r24, 0x03	; 3
     2cc:	11 f1       	breq	.+68     	; 0x312 <DIO_getPinValue+0x52>
     2ce:	08 95       	ret
     2d0:	89 b3       	in	r24, 0x19	; 25
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_getPinValue+0x1a>
     2d6:	95 95       	asr	r25
     2d8:	87 95       	ror	r24
     2da:	6a 95       	dec	r22
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_getPinValue+0x16>
     2de:	81 70       	andi	r24, 0x01	; 1
     2e0:	fa 01       	movw	r30, r20
     2e2:	80 83       	st	Z, r24
     2e4:	08 95       	ret
     2e6:	86 b3       	in	r24, 0x16	; 22
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_getPinValue+0x30>
     2ec:	95 95       	asr	r25
     2ee:	87 95       	ror	r24
     2f0:	6a 95       	dec	r22
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_getPinValue+0x2c>
     2f4:	81 70       	andi	r24, 0x01	; 1
     2f6:	fa 01       	movw	r30, r20
     2f8:	80 83       	st	Z, r24
     2fa:	08 95       	ret
     2fc:	83 b3       	in	r24, 0x13	; 19
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_getPinValue+0x46>
     302:	95 95       	asr	r25
     304:	87 95       	ror	r24
     306:	6a 95       	dec	r22
     308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_getPinValue+0x42>
     30a:	81 70       	andi	r24, 0x01	; 1
     30c:	fa 01       	movw	r30, r20
     30e:	80 83       	st	Z, r24
     310:	08 95       	ret
     312:	80 b3       	in	r24, 0x10	; 16
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_getPinValue+0x5c>
     318:	95 95       	asr	r25
     31a:	87 95       	ror	r24
     31c:	6a 95       	dec	r22
     31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_getPinValue+0x58>
     320:	81 70       	andi	r24, 0x01	; 1
     322:	fa 01       	movw	r30, r20
     324:	80 83       	st	Z, r24
     326:	08 95       	ret

00000328 <DIO_activePinInPullUpResistance>:
}


void DIO_activePinInPullUpResistance(u8 PortId, u8 PinId)
{
	switch(PortId)
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	89 f0       	breq	.+34     	; 0x34e <DIO_activePinInPullUpResistance+0x26>
     32c:	28 f0       	brcs	.+10     	; 0x338 <DIO_activePinInPullUpResistance+0x10>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	c9 f0       	breq	.+50     	; 0x364 <DIO_activePinInPullUpResistance+0x3c>
     332:	83 30       	cpi	r24, 0x03	; 3
     334:	11 f1       	breq	.+68     	; 0x37a <DIO_activePinInPullUpResistance+0x52>
     336:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA,PinId);
     338:	2b b3       	in	r18, 0x1b	; 27
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_activePinInPullUpResistance+0x1c>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	6a 95       	dec	r22
     346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_activePinInPullUpResistance+0x18>
     348:	82 2b       	or	r24, r18
     34a:	8b bb       	out	0x1b, r24	; 27
		break;
     34c:	08 95       	ret
		
		case DIO_PORTB:
		SET_BIT(PORTB,PinId);
     34e:	28 b3       	in	r18, 0x18	; 24
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_activePinInPullUpResistance+0x32>
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	6a 95       	dec	r22
     35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_activePinInPullUpResistance+0x2e>
     35e:	82 2b       	or	r24, r18
     360:	88 bb       	out	0x18, r24	; 24
		break;
     362:	08 95       	ret
		
		case DIO_PORTC:
		SET_BIT(PORTC,PinId);
     364:	25 b3       	in	r18, 0x15	; 21
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_activePinInPullUpResistance+0x48>
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	6a 95       	dec	r22
     372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_activePinInPullUpResistance+0x44>
     374:	82 2b       	or	r24, r18
     376:	85 bb       	out	0x15, r24	; 21
		break;
     378:	08 95       	ret
		
		case DIO_PORTD:
		SET_BIT(PORTD,PinId);
     37a:	22 b3       	in	r18, 0x12	; 18
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_activePinInPullUpResistance+0x5e>
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	6a 95       	dec	r22
     388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_activePinInPullUpResistance+0x5a>
     38a:	82 2b       	or	r24, r18
     38c:	82 bb       	out	0x12, r24	; 18
     38e:	08 95       	ret

00000390 <DOOR_Open>:
/* HAL */
#include "DOOR_Interface.h"

void DOOR_Open(void)
{
	TIMER1_init();
     390:	0e 94 54 09 	call	0x12a8	; 0x12a8 <TIMER1_init>
	TIMER1_setCompareMatchValueA(499);
     394:	83 ef       	ldi	r24, 0xF3	; 243
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 78 09 	call	0x12f0	; 0x12f0 <TIMER1_setCompareMatchValueA>
	TIMER1_start();
     39c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <TIMER1_start>
     3a0:	08 95       	ret

000003a2 <DOOR_Close>:
}

void DOOR_Close(void)
{
	TIMER1_init();
     3a2:	0e 94 54 09 	call	0x12a8	; 0x12a8 <TIMER1_init>
	TIMER1_setCompareMatchValueA(249);
     3a6:	89 ef       	ldi	r24, 0xF9	; 249
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 78 09 	call	0x12f0	; 0x12f0 <TIMER1_setCompareMatchValueA>
	TIMER1_start();
     3ae:	0e 94 6e 09 	call	0x12dc	; 0x12dc <TIMER1_start>
     3b2:	08 95       	ret

000003b4 <EEPROM_init>:
#include "EEPROM_interface.h"


void EEPROM_init(void)
{
	TWI_initMaster();
     3b4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_initMaster>
     3b8:	08 95       	ret

000003ba <EEPROM_writeByte>:
}


void EEPROM_writeByte(u16 byteAddress, u8 data)
{
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	d8 2f       	mov	r29, r24
     3c2:	c6 2f       	mov	r28, r22
	u8 address = (EEPROM_FIXED_ADDRESS | (byteAddress>>8));
     3c4:	19 2f       	mov	r17, r25
     3c6:	10 65       	ori	r17, 0x50	; 80
	
	// Send start condition
	TWI_sendStartCondition();
     3c8:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_sendStartCondition>
	
	// Send slave address with write operation
	TWI_sendSlaveAddWithWrite(address);
     3cc:	81 2f       	mov	r24, r17
     3ce:	0e 94 ad 09 	call	0x135a	; 0x135a <TWI_sendSlaveAddWithWrite>
	
	// Send byte address
	TWI_sendMasterDataByte((u8)byteAddress);
     3d2:	8d 2f       	mov	r24, r29
     3d4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_sendMasterDataByte>
	
	// Send byte data
	TWI_sendMasterDataByte(data);
     3d8:	8c 2f       	mov	r24, r28
     3da:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_sendMasterDataByte>
	
	// Send stop condition
	TWI_sendStopCondition();
     3de:	0e 94 a6 09 	call	0x134c	; 0x134c <TWI_sendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e2:	8f e1       	ldi	r24, 0x1F	; 31
     3e4:	9e e4       	ldi	r25, 0x4E	; 78
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <EEPROM_writeByte+0x2c>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <EEPROM_writeByte+0x32>
     3ec:	00 00       	nop
	
	_delay_ms(5);
}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	08 95       	ret

000003f6 <EEPROM_readByte>:


u8 EEPROM_readByte(u16 byteAddress)
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	d8 2f       	mov	r29, r24
	u8 returnedData;
	
	u8 address = (EEPROM_FIXED_ADDRESS | (byteAddress>>8));
     3fc:	c9 2f       	mov	r28, r25
     3fe:	c0 65       	ori	r28, 0x50	; 80
	
	// Send start condition
	TWI_sendStartCondition();
     400:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_sendStartCondition>
	
	// Send slave address with write operation
	TWI_sendSlaveAddWithWrite(address);
     404:	8c 2f       	mov	r24, r28
     406:	0e 94 ad 09 	call	0x135a	; 0x135a <TWI_sendSlaveAddWithWrite>
	
	// Send byte address
	TWI_sendMasterDataByte((u8)byteAddress);
     40a:	8d 2f       	mov	r24, r29
     40c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_sendMasterDataByte>
	
	// Send repeated start
	TWI_sendRepStartCondition();
     410:	0e 94 98 09 	call	0x1330	; 0x1330 <TWI_sendRepStartCondition>
	
	// Send slave address with read operation
	TWI_sendSlaveAddWithRead(address);
     414:	8c 2f       	mov	r24, r28
     416:	0e 94 c0 09 	call	0x1380	; 0x1380 <TWI_sendSlaveAddWithRead>
	
	// Read byte data
	returnedData = TWI_recieveMasterDataByte();
     41a:	0e 94 df 09 	call	0x13be	; 0x13be <TWI_recieveMasterDataByte>
     41e:	c8 2f       	mov	r28, r24
	
	// Send stop condition
	TWI_sendStopCondition();
     420:	0e 94 a6 09 	call	0x134c	; 0x134c <TWI_sendStopCondition>
     424:	8f e1       	ldi	r24, 0x1F	; 31
     426:	9e e4       	ldi	r25, 0x4E	; 78
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42e:	00 00       	nop
	
	_delay_ms(5);
	
	return returnedData;
     430:	8c 2f       	mov	r24, r28
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <KPD_init>:


void KPD_init(void)
{
	//coloumns pins >> output
	DIO_setPinDeriction(KPD_COLS_PORT, KPD_COL0_PIN, DIO_PIN_OUTPUT);
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	64 e0       	ldi	r22, 0x04	; 4
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	DIO_setPinDeriction(KPD_COLS_PORT, KPD_COL1_PIN, DIO_PIN_OUTPUT);
     442:	41 e0       	ldi	r20, 0x01	; 1
     444:	65 e0       	ldi	r22, 0x05	; 5
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	DIO_setPinDeriction(KPD_COLS_PORT, KPD_COL2_PIN, DIO_PIN_OUTPUT);
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	66 e0       	ldi	r22, 0x06	; 6
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	DIO_setPinDeriction(KPD_COLS_PORT, KPD_COL3_PIN, DIO_PIN_OUTPUT);
     456:	41 e0       	ldi	r20, 0x01	; 1
     458:	67 e0       	ldi	r22, 0x07	; 7
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	
	//rows pins >> input
	DIO_setPinDeriction(KPD_ROWS_PORT, KPD_ROW0_PIN, DIO_PIN_INPUT);
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	63 e0       	ldi	r22, 0x03	; 3
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	DIO_setPinDeriction(KPD_ROWS_PORT, KPD_ROW1_PIN, DIO_PIN_INPUT);
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	64 e0       	ldi	r22, 0x04	; 4
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	DIO_setPinDeriction(KPD_ROWS_PORT, KPD_ROW2_PIN, DIO_PIN_INPUT);
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	65 e0       	ldi	r22, 0x05	; 5
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	DIO_setPinDeriction(KPD_ROWS_PORT, KPD_ROW3_PIN, DIO_PIN_INPUT);
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	66 e0       	ldi	r22, 0x06	; 6
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	
	//active internal pull up for rows pins
	DIO_activePinInPullUpResistance(KPD_ROWS_PORT, KPD_ROW0_PIN);
     488:	63 e0       	ldi	r22, 0x03	; 3
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	0e 94 94 01 	call	0x328	; 0x328 <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KPD_ROWS_PORT, KPD_ROW1_PIN);
     490:	64 e0       	ldi	r22, 0x04	; 4
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 94 01 	call	0x328	; 0x328 <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KPD_ROWS_PORT, KPD_ROW2_PIN);
     498:	65 e0       	ldi	r22, 0x05	; 5
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	0e 94 94 01 	call	0x328	; 0x328 <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KPD_ROWS_PORT, KPD_ROW3_PIN);
     4a0:	66 e0       	ldi	r22, 0x06	; 6
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	0e 94 94 01 	call	0x328	; 0x328 <DIO_activePinInPullUpResistance>
     4a8:	08 95       	ret

000004aa <KPD_getValue>:
}


void KPD_getValue(u8* returnedValue)
{
     4aa:	7f 92       	push	r7
     4ac:	8f 92       	push	r8
     4ae:	9f 92       	push	r9
     4b0:	af 92       	push	r10
     4b2:	bf 92       	push	r11
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	69 97       	sbiw	r28, 0x19	; 25
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	5c 01       	movw	r10, r24
	u8 colsCounter,rowsCounter,pinValue;
	u8 flag = 0;
	u8 coloumnsPins[4] = {KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
     4d6:	24 e0       	ldi	r18, 0x04	; 4
     4d8:	2a 83       	std	Y+2, r18	; 0x02
     4da:	95 e0       	ldi	r25, 0x05	; 5
     4dc:	9b 83       	std	Y+3, r25	; 0x03
     4de:	86 e0       	ldi	r24, 0x06	; 6
     4e0:	8c 83       	std	Y+4, r24	; 0x04
     4e2:	37 e0       	ldi	r19, 0x07	; 7
     4e4:	3d 83       	std	Y+5, r19	; 0x05
	u8 rowsPins[4]     = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
     4e6:	33 e0       	ldi	r19, 0x03	; 3
     4e8:	3e 83       	std	Y+6, r19	; 0x06
     4ea:	2f 83       	std	Y+7, r18	; 0x07
     4ec:	98 87       	std	Y+8, r25	; 0x08
     4ee:	89 87       	std	Y+9, r24	; 0x09
	u8 KPD_Chars[4][4] = {{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};
     4f0:	80 e1       	ldi	r24, 0x10	; 16
     4f2:	e0 e6       	ldi	r30, 0x60	; 96
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	de 01       	movw	r26, r28
     4f8:	1a 96       	adiw	r26, 0x0a	; 10
     4fa:	01 90       	ld	r0, Z+
     4fc:	0d 92       	st	X+, r0
     4fe:	8a 95       	dec	r24
     500:	e1 f7       	brne	.-8      	; 0x4fa <KPD_getValue+0x50>


void KPD_getValue(u8* returnedValue)
{
	u8 colsCounter,rowsCounter,pinValue;
	u8 flag = 0;
     502:	71 2c       	mov	r7, r1
	u8 coloumnsPins[4] = {KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
	u8 rowsPins[4]     = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	u8 KPD_Chars[4][4] = {{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};
	
	for(colsCounter=0;colsCounter<4;colsCounter++)
     504:	91 2c       	mov	r9, r1
     506:	4d c0       	rjmp	.+154    	; 0x5a2 <KPD_getValue+0xf8>
	{
		// Activate Each cols
		DIO_setPinValue(KPD_COLS_PORT, coloumnsPins[colsCounter], DIO_PIN_LOW);
     508:	c9 2c       	mov	r12, r9
     50a:	d1 2c       	mov	r13, r1
     50c:	e2 e0       	ldi	r30, 0x02	; 2
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	ec 0f       	add	r30, r28
     512:	fd 1f       	adc	r31, r29
     514:	ec 0d       	add	r30, r12
     516:	fd 1d       	adc	r31, r13
     518:	80 80       	ld	r8, Z
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	68 2d       	mov	r22, r8
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
		
		// Loop TO Check Rows Values
		for(rowsCounter=0;rowsCounter<4;rowsCounter++)
     524:	10 e0       	ldi	r17, 0x00	; 0
     526:	32 c0       	rjmp	.+100    	; 0x58c <KPD_getValue+0xe2>
		{
			DIO_getPinValue(KPD_ROWS_PORT, rowsPins[rowsCounter], &pinValue);
     528:	e1 2e       	mov	r14, r17
     52a:	f1 2c       	mov	r15, r1
     52c:	e6 e0       	ldi	r30, 0x06	; 6
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	ec 0f       	add	r30, r28
     532:	fd 1f       	adc	r31, r29
     534:	ee 0d       	add	r30, r14
     536:	ff 1d       	adc	r31, r15
     538:	00 81       	ld	r16, Z
     53a:	ae 01       	movw	r20, r28
     53c:	4f 5f       	subi	r20, 0xFF	; 255
     53e:	5f 4f       	sbci	r21, 0xFF	; 255
     540:	60 2f       	mov	r22, r16
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DIO_getPinValue>
			
			if(pinValue == 0)
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	81 11       	cpse	r24, r1
     54c:	1e c0       	rjmp	.+60     	; 0x58a <KPD_getValue+0xe0>
			{
				*returnedValue = KPD_Chars[rowsCounter][colsCounter];
     54e:	ee 0c       	add	r14, r14
     550:	ff 1c       	adc	r15, r15
     552:	ee 0c       	add	r14, r14
     554:	ff 1c       	adc	r15, r15
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	8c 0f       	add	r24, r28
     55c:	9d 1f       	adc	r25, r29
     55e:	e8 0e       	add	r14, r24
     560:	f9 1e       	adc	r15, r25
     562:	f7 01       	movw	r30, r14
     564:	ec 0d       	add	r30, r12
     566:	fd 1d       	adc	r31, r13
     568:	81 85       	ldd	r24, Z+9	; 0x09
     56a:	f5 01       	movw	r30, r10
     56c:	80 83       	st	Z, r24
				while(pinValue == 0)
     56e:	07 c0       	rjmp	.+14     	; 0x57e <KPD_getValue+0xd4>
				{
					DIO_getPinValue(KPD_ROWS_PORT, rowsPins[rowsCounter], &pinValue);
     570:	ae 01       	movw	r20, r28
     572:	4f 5f       	subi	r20, 0xFF	; 255
     574:	5f 4f       	sbci	r21, 0xFF	; 255
     576:	60 2f       	mov	r22, r16
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DIO_getPinValue>
			DIO_getPinValue(KPD_ROWS_PORT, rowsPins[rowsCounter], &pinValue);
			
			if(pinValue == 0)
			{
				*returnedValue = KPD_Chars[rowsCounter][colsCounter];
				while(pinValue == 0)
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	88 23       	and	r24, r24
     582:	b1 f3       	breq	.-20     	; 0x570 <KPD_getValue+0xc6>
				{
					DIO_getPinValue(KPD_ROWS_PORT, rowsPins[rowsCounter], &pinValue);
				}
				flag =1;
     584:	77 24       	eor	r7, r7
     586:	73 94       	inc	r7
     588:	03 c0       	rjmp	.+6      	; 0x590 <KPD_getValue+0xe6>
	{
		// Activate Each cols
		DIO_setPinValue(KPD_COLS_PORT, coloumnsPins[colsCounter], DIO_PIN_LOW);
		
		// Loop TO Check Rows Values
		for(rowsCounter=0;rowsCounter<4;rowsCounter++)
     58a:	1f 5f       	subi	r17, 0xFF	; 255
     58c:	14 30       	cpi	r17, 0x04	; 4
     58e:	60 f2       	brcs	.-104    	; 0x528 <KPD_getValue+0x7e>
				flag =1;
				break;
			}
		}
		
		if(flag == 1)
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	7f 16       	cp	r7, r31
     594:	51 f0       	breq	.+20     	; 0x5aa <KPD_getValue+0x100>
		{
			break;
		}
		
		// deactivate current coloumn
		DIO_setPinValue(KPD_COLS_PORT, coloumnsPins[colsCounter], DIO_PIN_HIGH);	
     596:	41 e0       	ldi	r20, 0x01	; 1
     598:	68 2d       	mov	r22, r8
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
	u8 flag = 0;
	u8 coloumnsPins[4] = {KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
	u8 rowsPins[4]     = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	u8 KPD_Chars[4][4] = {{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};
	
	for(colsCounter=0;colsCounter<4;colsCounter++)
     5a0:	93 94       	inc	r9
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	89 15       	cp	r24, r9
     5a6:	08 f0       	brcs	.+2      	; 0x5aa <KPD_getValue+0x100>
     5a8:	af cf       	rjmp	.-162    	; 0x508 <KPD_getValue+0x5e>
		}
		
		// deactivate current coloumn
		DIO_setPinValue(KPD_COLS_PORT, coloumnsPins[colsCounter], DIO_PIN_HIGH);	
	}
}
     5aa:	69 96       	adiw	r28, 0x19	; 25
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	7f 90       	pop	r7
     5d0:	08 95       	ret

000005d2 <LCD_writeHalfPort>:
     5d2:	cf 93       	push	r28
     5d4:	c8 2f       	mov	r28, r24
     5d6:	80 ff       	sbrs	r24, 0
     5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <LCD_writeHalfPort+0x14>
     5da:	41 e0       	ldi	r20, 0x01	; 1
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <LCD_writeHalfPort+0x1e>
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	64 e0       	ldi	r22, 0x04	; 4
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     5f0:	c1 ff       	sbrs	r28, 1
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <LCD_writeHalfPort+0x2e>
     5f4:	41 e0       	ldi	r20, 0x01	; 1
     5f6:	65 e0       	ldi	r22, 0x05	; 5
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <LCD_writeHalfPort+0x38>
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	65 e0       	ldi	r22, 0x05	; 5
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     60a:	c2 ff       	sbrs	r28, 2
     60c:	06 c0       	rjmp	.+12     	; 0x61a <LCD_writeHalfPort+0x48>
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	66 e0       	ldi	r22, 0x06	; 6
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     618:	05 c0       	rjmp	.+10     	; 0x624 <LCD_writeHalfPort+0x52>
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	66 e0       	ldi	r22, 0x06	; 6
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     624:	c3 ff       	sbrs	r28, 3
     626:	06 c0       	rjmp	.+12     	; 0x634 <LCD_writeHalfPort+0x62>
     628:	41 e0       	ldi	r20, 0x01	; 1
     62a:	67 e0       	ldi	r22, 0x07	; 7
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     632:	05 c0       	rjmp	.+10     	; 0x63e <LCD_writeHalfPort+0x6c>
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	67 e0       	ldi	r22, 0x07	; 7
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <LCD_sendCmnd>:
     642:	cf 93       	push	r28
     644:	c8 2f       	mov	r28, r24
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	62 e0       	ldi	r22, 0x02	; 2
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     65a:	8c 2f       	mov	r24, r28
     65c:	82 95       	swap	r24
     65e:	8f 70       	andi	r24, 0x0F	; 15
     660:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_writeHalfPort>
     664:	41 e0       	ldi	r20, 0x01	; 1
     666:	63 e0       	ldi	r22, 0x03	; 3
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     66e:	8f e9       	ldi	r24, 0x9F	; 159
     670:	9f e0       	ldi	r25, 0x0F	; 15
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <LCD_sendCmnd+0x30>
     676:	00 c0       	rjmp	.+0      	; 0x678 <LCD_sendCmnd+0x36>
     678:	00 00       	nop
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	63 e0       	ldi	r22, 0x03	; 3
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     684:	8c 2f       	mov	r24, r28
     686:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_writeHalfPort>
     68a:	41 e0       	ldi	r20, 0x01	; 1
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     694:	8f e9       	ldi	r24, 0x9F	; 159
     696:	9f e0       	ldi	r25, 0x0F	; 15
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <LCD_sendCmnd+0x56>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <LCD_sendCmnd+0x5c>
     69e:	00 00       	nop
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	63 e0       	ldi	r22, 0x03	; 3
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <LCD_init>:
     6ae:	41 e0       	ldi	r20, 0x01	; 1
     6b0:	64 e0       	ldi	r22, 0x04	; 4
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
     6b8:	41 e0       	ldi	r20, 0x01	; 1
     6ba:	65 e0       	ldi	r22, 0x05	; 5
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
     6c2:	41 e0       	ldi	r20, 0x01	; 1
     6c4:	66 e0       	ldi	r22, 0x06	; 6
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	67 e0       	ldi	r22, 0x07	; 7
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
     6d6:	41 e0       	ldi	r20, 0x01	; 1
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
     6e0:	41 e0       	ldi	r20, 0x01	; 1
     6e2:	62 e0       	ldi	r22, 0x02	; 2
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
     6ea:	41 e0       	ldi	r20, 0x01	; 1
     6ec:	63 e0       	ldi	r22, 0x03	; 3
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
     6f4:	2f e7       	ldi	r18, 0x7F	; 127
     6f6:	85 eb       	ldi	r24, 0xB5	; 181
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	21 50       	subi	r18, 0x01	; 1
     6fc:	80 40       	sbci	r24, 0x00	; 0
     6fe:	90 40       	sbci	r25, 0x00	; 0
     700:	e1 f7       	brne	.-8      	; 0x6fa <LCD_init+0x4c>
     702:	00 c0       	rjmp	.+0      	; 0x704 <LCD_init+0x56>
     704:	00 00       	nop
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	62 e0       	ldi	r22, 0x02	; 2
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_writeHalfPort>
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	63 e0       	ldi	r22, 0x03	; 3
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     72a:	8f e9       	ldi	r24, 0x9F	; 159
     72c:	9f e0       	ldi	r25, 0x0F	; 15
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	f1 f7       	brne	.-4      	; 0x72e <LCD_init+0x80>
     732:	00 c0       	rjmp	.+0      	; 0x734 <LCD_init+0x86>
     734:	00 00       	nop
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	63 e0       	ldi	r22, 0x03	; 3
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     740:	88 e2       	ldi	r24, 0x28	; 40
     742:	0e 94 21 03 	call	0x642	; 0x642 <LCD_sendCmnd>
     746:	90 ef       	ldi	r25, 0xF0	; 240
     748:	9a 95       	dec	r25
     74a:	f1 f7       	brne	.-4      	; 0x748 <LCD_init+0x9a>
     74c:	8f e0       	ldi	r24, 0x0F	; 15
     74e:	0e 94 21 03 	call	0x642	; 0x642 <LCD_sendCmnd>
     752:	20 ef       	ldi	r18, 0xF0	; 240
     754:	2a 95       	dec	r18
     756:	f1 f7       	brne	.-4      	; 0x754 <LCD_init+0xa6>
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	0e 94 21 03 	call	0x642	; 0x642 <LCD_sendCmnd>
     75e:	8f e3       	ldi	r24, 0x3F	; 63
     760:	9f e1       	ldi	r25, 0x1F	; 31
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <LCD_init+0xb4>
     766:	00 c0       	rjmp	.+0      	; 0x768 <LCD_init+0xba>
     768:	00 00       	nop
     76a:	86 e0       	ldi	r24, 0x06	; 6
     76c:	0e 94 21 03 	call	0x642	; 0x642 <LCD_sendCmnd>
     770:	08 95       	ret

00000772 <LCD_sendChar>:
     772:	cf 93       	push	r28
     774:	c8 2f       	mov	r28, r24
     776:	41 e0       	ldi	r20, 0x01	; 1
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	62 e0       	ldi	r22, 0x02	; 2
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     78a:	8c 2f       	mov	r24, r28
     78c:	82 95       	swap	r24
     78e:	8f 70       	andi	r24, 0x0F	; 15
     790:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_writeHalfPort>
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	63 e0       	ldi	r22, 0x03	; 3
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     79e:	8f e9       	ldi	r24, 0x9F	; 159
     7a0:	9f e0       	ldi	r25, 0x0F	; 15
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <LCD_sendChar+0x30>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <LCD_sendChar+0x36>
     7a8:	00 00       	nop
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	63 e0       	ldi	r22, 0x03	; 3
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     7b4:	8c 2f       	mov	r24, r28
     7b6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_writeHalfPort>
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	63 e0       	ldi	r22, 0x03	; 3
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     7c4:	8f e9       	ldi	r24, 0x9F	; 159
     7c6:	9f e0       	ldi	r25, 0x0F	; 15
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <LCD_sendChar+0x56>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <LCD_sendChar+0x5c>
     7ce:	00 00       	nop
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	63 e0       	ldi	r22, 0x03	; 3
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <LCD_writeString>:
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	8c 01       	movw	r16, r24
     7e6:	c0 e0       	ldi	r28, 0x00	; 0
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <LCD_writeString+0x12>
     7ea:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_sendChar>
     7ee:	cf 5f       	subi	r28, 0xFF	; 255
     7f0:	f8 01       	movw	r30, r16
     7f2:	ec 0f       	add	r30, r28
     7f4:	f1 1d       	adc	r31, r1
     7f6:	80 81       	ld	r24, Z
     7f8:	81 11       	cpse	r24, r1
     7fa:	f7 cf       	rjmp	.-18     	; 0x7ea <LCD_writeString+0xc>
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	08 95       	ret

00000804 <LCD_clear>:
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	0e 94 21 03 	call	0x642	; 0x642 <LCD_sendCmnd>
     80a:	8f e3       	ldi	r24, 0x3F	; 63
     80c:	9f e1       	ldi	r25, 0x1F	; 31
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <LCD_clear+0xa>
     812:	00 c0       	rjmp	.+0      	; 0x814 <LCD_clear+0x10>
     814:	00 00       	nop
     816:	08 95       	ret

00000818 <LCD_goToSpecificPosition>:
}


void LCD_goToSpecificPosition(u8 LineNumber, u8 Position)
{
	if(LineNumber == LCD_LINE_ONE)
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	39 f4       	brne	.+14     	; 0x82a <LCD_goToSpecificPosition+0x12>
	{
		if(Position <= 15)
     81c:	60 31       	cpi	r22, 0x10	; 16
     81e:	68 f4       	brcc	.+26     	; 0x83a <LCD_goToSpecificPosition+0x22>
		{
			LCD_sendCmnd(0x80 + Position);
     820:	80 e8       	ldi	r24, 0x80	; 128
     822:	86 0f       	add	r24, r22
     824:	0e 94 21 03 	call	0x642	; 0x642 <LCD_sendCmnd>
     828:	08 95       	ret
		}
	}

	else if (LineNumber == LCD_LINE_TWO)
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	31 f4       	brne	.+12     	; 0x83a <LCD_goToSpecificPosition+0x22>
	{
		if(Position <= 15)
     82e:	60 31       	cpi	r22, 0x10	; 16
     830:	20 f4       	brcc	.+8      	; 0x83a <LCD_goToSpecificPosition+0x22>
		{
			LCD_sendCmnd(0xc0 + Position);
     832:	80 ec       	ldi	r24, 0xC0	; 192
     834:	86 0f       	add	r24, r22
     836:	0e 94 21 03 	call	0x642	; 0x642 <LCD_sendCmnd>
     83a:	08 95       	ret

0000083c <LED_on>:

/* HAL */
#include "LED_Interface.h"

void LED_on(u8 RegisterId, u8 PinId)
{
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	c8 2f       	mov	r28, r24
     842:	d6 2f       	mov	r29, r22
	DIO_setPinDeriction(RegisterId, PinId, DIO_PIN_OUTPUT);
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	DIO_setPinValue(RegisterId, PinId, DIO_PIN_HIGH);
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	6d 2f       	mov	r22, r29
     84e:	8c 2f       	mov	r24, r28
     850:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <LED_off>:

void LED_off(u8 RegisterId, u8 PinId)
{
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	c8 2f       	mov	r28, r24
     860:	d6 2f       	mov	r29, r22
	DIO_setPinDeriction(RegisterId, PinId, DIO_PIN_OUTPUT);
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	DIO_setPinValue(RegisterId, PinId, DIO_PIN_LOW);
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	6d 2f       	mov	r22, r29
     86c:	8c 2f       	mov	r24, r28
     86e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <ui8ComparePass>:




u8 ui8ComparePass(const u8* pass1,const u8* pass2,const u8 size)
{
     878:	dc 01       	movw	r26, r24
	u8 pin_counter=0;//the offset of the character of the pin
     87a:	90 e0       	ldi	r25, 0x00	; 0
	u8 ret_value =1;
	while (pin_counter<size)//loop till the pin is fully entered
     87c:	0d c0       	rjmp	.+26     	; 0x898 <ui8ComparePass+0x20>
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
     87e:	29 2f       	mov	r18, r25
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	fd 01       	movw	r30, r26
     884:	e2 0f       	add	r30, r18
     886:	f3 1f       	adc	r31, r19
     888:	50 81       	ld	r21, Z
     88a:	fb 01       	movw	r30, r22
     88c:	e2 0f       	add	r30, r18
     88e:	f3 1f       	adc	r31, r19
     890:	20 81       	ld	r18, Z
     892:	52 13       	cpse	r21, r18
     894:	05 c0       	rjmp	.+10     	; 0x8a0 <ui8ComparePass+0x28>
		{
			ret_value=0;//returns false that means the two PINs are not equal
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
     896:	9f 5f       	subi	r25, 0xFF	; 255

u8 ui8ComparePass(const u8* pass1,const u8* pass2,const u8 size)
{
	u8 pin_counter=0;//the offset of the character of the pin
	u8 ret_value =1;
	while (pin_counter<size)//loop till the pin is fully entered
     898:	94 17       	cp	r25, r20
     89a:	88 f3       	brcs	.-30     	; 0x87e <ui8ComparePass+0x6>


u8 ui8ComparePass(const u8* pass1,const u8* pass2,const u8 size)
{
	u8 pin_counter=0;//the offset of the character of the pin
	u8 ret_value =1;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	08 95       	ret
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
		{
			ret_value=0;//returns false that means the two PINs are not equal
     8a0:	80 e0       	ldi	r24, 0x00	; 0
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}
     8a2:	08 95       	ret

000008a4 <main>:
u8 temp_2;
u8 temp_sensor_reading;
 u8 temprature;

int main(void)
{
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <main+0xa>
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <main+0xc>
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
    LCD_init();
     8b4:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_init>
	KPD_init();
     8b8:	0e 94 1c 02 	call	0x438	; 0x438 <KPD_init>
	EEPROM_init();
     8bc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <EEPROM_init>
	DIO_setPinDeriction(DIO_PORTA,DIO_PIN1,DIO_PIN_INPUT);
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	
	ADC_init();
     8ca:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	
	DIO_setPinDeriction(DIO_PORTC,DIO_PIN1,DIO_PIN_OUTPUT);
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
	DIO_setPinDeriction(DIO_PORTC,DIO_PIN2,DIO_PIN_INPUT);
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	62 e0       	ldi	r22, 0x02	; 2
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>

	LCD_writeString("Welcome to smart");
     8e2:	80 e7       	ldi	r24, 0x70	; 112
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     8ea:	87 ea       	ldi	r24, 0xA7	; 167
     8ec:	91 e6       	ldi	r25, 0x61	; 97
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <main+0x4a>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <main+0x50>
     8f4:	00 00       	nop
	_delay_ms(100);
	LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_goToSpecificPosition>
	LCD_writeString("Home System");
     8fe:	81 e8       	ldi	r24, 0x81	; 129
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     906:	87 ea       	ldi	r24, 0xA7	; 167
     908:	91 e6       	ldi	r25, 0x61	; 97
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <main+0x66>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <main+0x6c>
     910:	00 00       	nop
	_delay_ms(100);
	LCD_clear();
     912:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
     916:	87 ea       	ldi	r24, 0xA7	; 167
     918:	91 e6       	ldi	r25, 0x61	; 97
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <main+0x76>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <main+0x7c>
     920:	00 00       	nop
	_delay_ms(100);
	LCD_writeString("1>ADMIN 2>GUEST");
     922:	8d e8       	ldi	r24, 0x8D	; 141
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
	
	
/*	
					************** Let user choose Mode ************						*/
valu=0;
     92a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
while(valu==0)
     92e:	04 c0       	rjmp	.+8      	; 0x938 <main+0x94>
	{
		KPD_getValue(&valu);
     930:	8e e7       	ldi	r24, 0x7E	; 126
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
	
	
/*	
					************** Let user choose Mode ************						*/
valu=0;
while(valu==0)
     938:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     93c:	88 23       	and	r24, r24
     93e:	c1 f3       	breq	.-16     	; 0x930 <main+0x8c>
		KPD_getValue(&valu);
	}
	
/*						************** In case of Guest Mode ************						*/

if(valu=='2'){
     940:	82 33       	cpi	r24, 0x32	; 50
     942:	09 f0       	breq	.+2      	; 0x946 <main+0xa2>
     944:	62 c3       	rjmp	.+1732   	; 0x100a <main+0x766>
	
/*						************** Enter password for first time ************				*/	 
	if(EEPROM_readByte(GUEST_PASSWORD_ADDRESS)!=GUEST_PASSWORD_ADDRESS_CHECK)	
     946:	81 e1       	ldi	r24, 0x11	; 17
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <EEPROM_readByte>
     94e:	88 23       	and	r24, r24
     950:	09 f4       	brne	.+2      	; 0x954 <main+0xb0>
     952:	5f c0       	rjmp	.+190    	; 0xa12 <main+0x16e>
	{
		LCD_writeString("Setup");
     954:	8d e9       	ldi	r24, 0x9D	; 157
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     95c:	83 ec       	ldi	r24, 0xC3	; 195
     95e:	99 e0       	ldi	r25, 0x09	; 9
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	f1 f7       	brne	.-4      	; 0x960 <main+0xbc>
     964:	00 c0       	rjmp	.+0      	; 0x966 <main+0xc2>
     966:	00 00       	nop
		_delay_ms(10);
		LCD_clear();
     968:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
		LCD_writeString("New Pass:");
     96c:	83 ea       	ldi	r24, 0xA3	; 163
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_goToSpecificPosition>
	
	u8 pass_counter=0;
	u8 Password[4]={(u8)0xFF,(u8)0xFF,(u8)0xFF,(u8)0xFF};
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	89 83       	std	Y+1, r24	; 0x01
     980:	8a 83       	std	Y+2, r24	; 0x02
     982:	8b 83       	std	Y+3, r24	; 0x03
     984:	8c 83       	std	Y+4, r24	; 0x04
		_delay_ms(10);
		LCD_clear();
		LCD_writeString("New Pass:");
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
	
	u8 pass_counter=0;
     986:	10 e0       	ldi	r17, 0x00	; 0
	u8 Password[4]={(u8)0xFF,(u8)0xFF,(u8)0xFF,(u8)0xFF};
		
		while(pass_counter<4)
     988:	28 c0       	rjmp	.+80     	; 0x9da <main+0x136>
		{
			valu=0;
     98a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
			while(valu==0)
     98e:	04 c0       	rjmp	.+8      	; 0x998 <main+0xf4>
			{
				KPD_getValue(&valu);
     990:	8e e7       	ldi	r24, 0x7E	; 126
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
	u8 Password[4]={(u8)0xFF,(u8)0xFF,(u8)0xFF,(u8)0xFF};
		
		while(pass_counter<4)
		{
			valu=0;
			while(valu==0)
     998:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     99c:	88 23       	and	r24, r24
     99e:	c1 f3       	breq	.-16     	; 0x990 <main+0xec>
			{
				KPD_getValue(&valu);
			}
			Password[pass_counter]=valu;
     9a0:	e1 e0       	ldi	r30, 0x01	; 1
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	ec 0f       	add	r30, r28
     9a6:	fd 1f       	adc	r31, r29
     9a8:	e1 0f       	add	r30, r17
     9aa:	f1 1d       	adc	r31, r1
     9ac:	80 83       	st	Z, r24
			LCD_sendChar(valu);
     9ae:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_sendChar>
     9b2:	83 ec       	ldi	r24, 0xC3	; 195
     9b4:	99 e0       	ldi	r25, 0x09	; 9
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <main+0x112>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <main+0x118>
     9bc:	00 00       	nop
			_delay_ms(10);
			LCD_goToSpecificPosition(LCD_LINE_TWO,pass_counter);
     9be:	61 2f       	mov	r22, r17
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_goToSpecificPosition>
			LCD_sendChar('*');
     9c6:	8a e2       	ldi	r24, 0x2A	; 42
     9c8:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_sendChar>
     9cc:	87 ea       	ldi	r24, 0xA7	; 167
     9ce:	91 e6       	ldi	r25, 0x61	; 97
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <main+0x12c>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <main+0x132>
     9d6:	00 00       	nop
			_delay_ms(100);
			pass_counter++;
     9d8:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
	
	u8 pass_counter=0;
	u8 Password[4]={(u8)0xFF,(u8)0xFF,(u8)0xFF,(u8)0xFF};
		
		while(pass_counter<4)
     9da:	14 30       	cpi	r17, 0x04	; 4
     9dc:	b0 f2       	brcs	.-84     	; 0x98a <main+0xe6>
			LCD_goToSpecificPosition(LCD_LINE_TWO,pass_counter);
			LCD_sendChar('*');
			_delay_ms(100);
			pass_counter++;
		}
		EEPROM_writeByte(GUEST_PASSWORD,Password);
     9de:	6c 2f       	mov	r22, r28
     9e0:	6f 5f       	subi	r22, 0xFF	; 255
     9e2:	81 e2       	ldi	r24, 0x21	; 33
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <EEPROM_writeByte>
		EEPROM_writeByte(GUEST_PASSWORD_ADDRESS,GUEST_PASSWORD_ADDRESS_CHECK);
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	81 e1       	ldi	r24, 0x11	; 17
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <EEPROM_writeByte>
		LCD_clear();
     9f4:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
		LCD_writeString("Pass Saved");
     9f8:	8d ea       	ldi	r24, 0xAD	; 173
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     a00:	87 ea       	ldi	r24, 0xA7	; 167
     a02:	91 e6       	ldi	r25, 0x61	; 97
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <main+0x160>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <main+0x166>
     a0a:	00 00       	nop
		_delay_ms(100);
		LCD_clear();
     a0c:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <main+0x176>
	}
	else
	{
		u8 Blocked_Mode=EEPROM_readByte(BLOCKED_MODE_ACTIVATE);
     a12:	8a e1       	ldi	r24, 0x1A	; 26
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <EEPROM_readByte>
	}
	
    while (1) 
    {
		valu =0;
     a1a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
		u8 SelectMenu;
		LCD_clear();
     a1e:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
		LCD_writeString("Welcome to");
     a22:	88 eb       	ldi	r24, 0xB8	; 184
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_goToSpecificPosition>
		LCD_writeString("User Mode");
     a32:	83 ec       	ldi	r24, 0xC3	; 195
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     a3a:	9f e3       	ldi	r25, 0x3F	; 63
     a3c:	2d e0       	ldi	r18, 0x0D	; 13
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	91 50       	subi	r25, 0x01	; 1
     a42:	20 40       	sbci	r18, 0x00	; 0
     a44:	80 40       	sbci	r24, 0x00	; 0
     a46:	e1 f7       	brne	.-8      	; 0xa40 <main+0x19c>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <main+0x1a6>
     a4a:	00 00       	nop
		_delay_ms(1000);
		LCD_clear();
     a4c:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
		LCD_writeString("Write pass");
     a50:	8d ec       	ldi	r24, 0xCD	; 205
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_goToSpecificPosition>
		u8 pass_counter=0;
		u8 GUEST_Password[4]={(u8)0xFF,(u8)0xFF,(u8)0xFF,(u8)0xFF};
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	8a 83       	std	Y+2, r24	; 0x02
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	8c 83       	std	Y+4, r24	; 0x04
		LCD_writeString("User Mode");
		_delay_ms(1000);
		LCD_clear();
		LCD_writeString("Write pass");
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
		u8 pass_counter=0;
     a6a:	10 e0       	ldi	r17, 0x00	; 0
		u8 GUEST_Password[4]={(u8)0xFF,(u8)0xFF,(u8)0xFF,(u8)0xFF};
	

	
		while(pass_counter<4)
     a6c:	28 c0       	rjmp	.+80     	; 0xabe <main+0x21a>
		{
			
			valu=0;
     a6e:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
			while(valu==0)
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <main+0x1d8>
			{
				KPD_getValue(&valu);
     a74:	8e e7       	ldi	r24, 0x7E	; 126
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
	
		while(pass_counter<4)
		{
			
			valu=0;
			while(valu==0)
     a7c:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     a80:	88 23       	and	r24, r24
     a82:	c1 f3       	breq	.-16     	; 0xa74 <main+0x1d0>
			{
				KPD_getValue(&valu);
			}
			GUEST_Password[pass_counter]=valu;
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	ec 0f       	add	r30, r28
     a8a:	fd 1f       	adc	r31, r29
     a8c:	e1 0f       	add	r30, r17
     a8e:	f1 1d       	adc	r31, r1
     a90:	80 83       	st	Z, r24
			LCD_sendChar(valu);
     a92:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_sendChar>
     a96:	83 ec       	ldi	r24, 0xC3	; 195
     a98:	99 e0       	ldi	r25, 0x09	; 9
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <main+0x1f6>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <main+0x1fc>
     aa0:	00 00       	nop
			_delay_ms(10);
			LCD_goToSpecificPosition(LCD_LINE_TWO,pass_counter);
     aa2:	61 2f       	mov	r22, r17
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_goToSpecificPosition>
			LCD_sendChar('*');
     aaa:	8a e2       	ldi	r24, 0x2A	; 42
     aac:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_sendChar>
     ab0:	87 ea       	ldi	r24, 0xA7	; 167
     ab2:	91 e6       	ldi	r25, 0x61	; 97
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <main+0x210>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <main+0x216>
     aba:	00 00       	nop
			_delay_ms(100);
			pass_counter++;
     abc:	1f 5f       	subi	r17, 0xFF	; 255
		u8 pass_counter=0;
		u8 GUEST_Password[4]={(u8)0xFF,(u8)0xFF,(u8)0xFF,(u8)0xFF};
	

	
		while(pass_counter<4)
     abe:	14 30       	cpi	r17, 0x04	; 4
     ac0:	b0 f2       	brcs	.-84     	; 0xa6e <main+0x1ca>
			LCD_goToSpecificPosition(LCD_LINE_TWO,pass_counter);
			LCD_sendChar('*');
			_delay_ms(100);
			pass_counter++;
		}
		EEPROM_writeByte(GUEST_PASSWORD_CHECKED,GUEST_Password);
     ac2:	6c 2f       	mov	r22, r28
     ac4:	6f 5f       	subi	r22, 0xFF	; 255
     ac6:	81 eb       	ldi	r24, 0xB1	; 177
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 dd 01 	call	0x3ba	; 0x3ba <EEPROM_writeByte>
     ace:	87 ea       	ldi	r24, 0xA7	; 167
     ad0:	91 e6       	ldi	r25, 0x61	; 97
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <main+0x22e>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <main+0x234>
     ad8:	00 00       	nop
		_delay_ms(100);
		LCD_clear();
     ada:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
		u8 result =ui8ComparePass(EEPROM_readByte(GUEST_PASSWORD_CHECKED),EEPROM_readByte(GUEST_PASSWORD),4);
     ade:	81 e2       	ldi	r24, 0x21	; 33
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <EEPROM_readByte>
     ae6:	08 2f       	mov	r16, r24
     ae8:	10 e0       	ldi	r17, 0x00	; 0
     aea:	81 eb       	ldi	r24, 0xB1	; 177
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <EEPROM_readByte>
     af2:	44 e0       	ldi	r20, 0x04	; 4
     af4:	b8 01       	movw	r22, r16
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 3c 04 	call	0x878	; 0x878 <ui8ComparePass>
		
		if(result==1)
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	09 f0       	breq	.+2      	; 0xb02 <main+0x25e>
     b00:	58 c2       	rjmp	.+1200   	; 0xfb2 <main+0x70e>
		{
		LCD_writeString("Login..");
     b02:	88 ed       	ldi	r24, 0xD8	; 216
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     b0a:	87 ea       	ldi	r24, 0xA7	; 167
     b0c:	91 e6       	ldi	r25, 0x61	; 97
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <main+0x26a>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <main+0x270>
     b14:	00 00       	nop
		_delay_ms(100);
		LCD_clear();
     b16:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
		Repeat:
		LCD_writeString("1>Lamp1 2>Lamp2");
     b1a:	80 ee       	ldi	r24, 0xE0	; 224
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_goToSpecificPosition>
		LCD_writeString("3>Lamp3 4>MoreOP");
     b2a:	80 ef       	ldi	r24, 0xF0	; 240
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
		valu=0;
     b32:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
		while(valu == 0){
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <main+0x29c>
			KPD_getValue(&valu);
     b38:	8e e7       	ldi	r24, 0x7E	; 126
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
		Repeat:
		LCD_writeString("1>Lamp1 2>Lamp2");
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
		LCD_writeString("3>Lamp3 4>MoreOP");
		valu=0;
		while(valu == 0){
     b40:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     b44:	88 23       	and	r24, r24
     b46:	c1 f3       	breq	.-16     	; 0xb38 <main+0x294>
			KPD_getValue(&valu);
			}
			
			switch(valu)
     b48:	82 33       	cpi	r24, 0x32	; 50
     b4a:	09 f4       	brne	.+2      	; 0xb4e <main+0x2aa>
     b4c:	57 c0       	rjmp	.+174    	; 0xbfc <main+0x358>
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <main+0x2b2>
     b50:	81 33       	cpi	r24, 0x31	; 49
     b52:	41 f0       	breq	.+16     	; 0xb64 <main+0x2c0>
     b54:	ec c0       	rjmp	.+472    	; 0xd2e <main+0x48a>
     b56:	83 33       	cpi	r24, 0x33	; 51
     b58:	09 f4       	brne	.+2      	; 0xb5c <main+0x2b8>
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <main+0x3e4>
     b5c:	84 33       	cpi	r24, 0x34	; 52
     b5e:	09 f4       	brne	.+2      	; 0xb62 <main+0x2be>
     b60:	d8 c0       	rjmp	.+432    	; 0xd12 <main+0x46e>
     b62:	e5 c0       	rjmp	.+458    	; 0xd2e <main+0x48a>
			{
				case SELECT_LAMP1:
					LCD_clear();
     b64:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					LCD_writeString("ON>ON 0>OFF");
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     b70:	87 e8       	ldi	r24, 0x87	; 135
     b72:	93 e1       	ldi	r25, 0x13	; 19
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <main+0x2d0>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <main+0x2d6>
     b7a:	00 00       	nop
					_delay_ms(20);
					valu=0;
     b7c:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
					while(valu == 0){
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <main+0x2e6>
					KPD_getValue(&valu);
     b82:	8e e7       	ldi	r24, 0x7E	; 126
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
				case SELECT_LAMP1:
					LCD_clear();
					LCD_writeString("ON>ON 0>OFF");
					_delay_ms(20);
					valu=0;
					while(valu == 0){
     b8a:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     b8e:	88 23       	and	r24, r24
     b90:	c1 f3       	breq	.-16     	; 0xb82 <main+0x2de>
					KPD_getValue(&valu);
					};
					LCD_clear();
     b92:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					if (valu == SELECT_LAMP_ON )
     b96:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     b9a:	8a 32       	cpi	r24, 0x2A	; 42
     b9c:	b1 f4       	brne	.+44     	; 0xbca <main+0x326>
					{
						LED_on(LED1_REG,LED1_PIN);
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 1e 04 	call	0x83c	; 0x83c <LED_on>
						LCD_writeString("LED1 ON...");
     baa:	8d e0       	ldi	r24, 0x0D	; 13
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     bb2:	9f e7       	ldi	r25, 0x7F	; 127
     bb4:	2a e1       	ldi	r18, 0x1A	; 26
     bb6:	86 e0       	ldi	r24, 0x06	; 6
     bb8:	91 50       	subi	r25, 0x01	; 1
     bba:	20 40       	sbci	r18, 0x00	; 0
     bbc:	80 40       	sbci	r24, 0x00	; 0
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <main+0x314>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <main+0x31e>
     bc2:	00 00       	nop
						_delay_ms(2000);
						LCD_clear();
     bc4:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
						goto Repeat;
     bc8:	a8 cf       	rjmp	.-176    	; 0xb1a <main+0x276>
					}
					else if (valu==SELECT_LAMP_OFF)
     bca:	80 33       	cpi	r24, 0x30	; 48
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <main+0x32c>
     bce:	af c0       	rjmp	.+350    	; 0xd2e <main+0x48a>
					{
						LED_off(LED1_REG,LED1_PIN);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 2d 04 	call	0x85a	; 0x85a <LED_off>
						LCD_writeString("LED1 Off");
     bdc:	88 e1       	ldi	r24, 0x18	; 24
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     be4:	9f e7       	ldi	r25, 0x7F	; 127
     be6:	2a e1       	ldi	r18, 0x1A	; 26
     be8:	86 e0       	ldi	r24, 0x06	; 6
     bea:	91 50       	subi	r25, 0x01	; 1
     bec:	20 40       	sbci	r18, 0x00	; 0
     bee:	80 40       	sbci	r24, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <main+0x346>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <main+0x350>
     bf4:	00 00       	nop
						_delay_ms(2000);
						LCD_clear();
     bf6:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
						goto Repeat;
     bfa:	8f cf       	rjmp	.-226    	; 0xb1a <main+0x276>
					}
				
				break;
				
				case SELECT_LAMP2:
				LCD_clear();
     bfc:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				LCD_writeString("ON>ON 0>OFF");
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     c08:	87 e8       	ldi	r24, 0x87	; 135
     c0a:	93 e1       	ldi	r25, 0x13	; 19
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <main+0x368>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <main+0x36e>
     c12:	00 00       	nop
				_delay_ms(20);
				valu=0;
     c14:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
				while(valu == 0){
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <main+0x37e>
					KPD_getValue(&valu);
     c1a:	8e e7       	ldi	r24, 0x7E	; 126
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
				case SELECT_LAMP2:
				LCD_clear();
				LCD_writeString("ON>ON 0>OFF");
				_delay_ms(20);
				valu=0;
				while(valu == 0){
     c22:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     c26:	88 23       	and	r24, r24
     c28:	c1 f3       	breq	.-16     	; 0xc1a <main+0x376>
					KPD_getValue(&valu);
				};
				LCD_clear();
     c2a:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				if (valu == SELECT_LAMP_ON )
     c2e:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     c32:	8a 32       	cpi	r24, 0x2A	; 42
     c34:	99 f4       	brne	.+38     	; 0xc5c <main+0x3b8>
				{
					LED_on(LED2_REG,LED2_PIN);
     c36:	62 e0       	ldi	r22, 0x02	; 2
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 1e 04 	call	0x83c	; 0x83c <LED_on>
					LCD_writeString("LED2 ON...");
     c42:	81 e2       	ldi	r24, 0x21	; 33
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     c4a:	8f e4       	ldi	r24, 0x4F	; 79
     c4c:	93 ec       	ldi	r25, 0xC3	; 195
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <main+0x3aa>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <main+0x3b0>
     c54:	00 00       	nop
					_delay_ms(200);
					LCD_clear();
     c56:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					goto Repeat;
     c5a:	5f cf       	rjmp	.-322    	; 0xb1a <main+0x276>
				}
				else if (valu==SELECT_LAMP_OFF)
     c5c:	80 33       	cpi	r24, 0x30	; 48
     c5e:	09 f0       	breq	.+2      	; 0xc62 <main+0x3be>
     c60:	66 c0       	rjmp	.+204    	; 0xd2e <main+0x48a>
				{
					LED_off(LED2_REG,LED2_PIN);
     c62:	62 e0       	ldi	r22, 0x02	; 2
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 2d 04 	call	0x85a	; 0x85a <LED_off>
					LCD_writeString("LED2 Off");
     c6e:	8c e2       	ldi	r24, 0x2C	; 44
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     c76:	8f e4       	ldi	r24, 0x4F	; 79
     c78:	93 ec       	ldi	r25, 0xC3	; 195
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <main+0x3d6>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <main+0x3dc>
     c80:	00 00       	nop
					_delay_ms(200);
					LCD_clear();
     c82:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					goto Repeat;
     c86:	49 cf       	rjmp	.-366    	; 0xb1a <main+0x276>
				}
				
				break;
				
				case SELECT_LAMP3:
				LCD_clear();
     c88:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				LCD_writeString("ON>ON 0>OFF");
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     c94:	87 e8       	ldi	r24, 0x87	; 135
     c96:	93 e1       	ldi	r25, 0x13	; 19
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <main+0x3f4>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <main+0x3fa>
     c9e:	00 00       	nop
				_delay_ms(20);
				valu=0;
     ca0:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
				while(valu == 0){
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <main+0x40a>
					KPD_getValue(&valu);
     ca6:	8e e7       	ldi	r24, 0x7E	; 126
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
				case SELECT_LAMP3:
				LCD_clear();
				LCD_writeString("ON>ON 0>OFF");
				_delay_ms(20);
				valu=0;
				while(valu == 0){
     cae:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     cb2:	88 23       	and	r24, r24
     cb4:	c1 f3       	breq	.-16     	; 0xca6 <main+0x402>
					KPD_getValue(&valu);
				};
				LCD_clear();
     cb6:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				if (valu == SELECT_LAMP_ON )
     cba:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     cbe:	8a 32       	cpi	r24, 0x2A	; 42
     cc0:	99 f4       	brne	.+38     	; 0xce8 <main+0x444>
				{
					LED_on(LED3_REG,LED3_PIN);
     cc2:	62 e0       	ldi	r22, 0x02	; 2
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 1e 04 	call	0x83c	; 0x83c <LED_on>
					LCD_writeString("LED3 ON...");
     cce:	85 e3       	ldi	r24, 0x35	; 53
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     cd6:	8f e4       	ldi	r24, 0x4F	; 79
     cd8:	93 ec       	ldi	r25, 0xC3	; 195
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <main+0x436>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <main+0x43c>
     ce0:	00 00       	nop
					_delay_ms(200);
					LCD_clear();
     ce2:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					goto Repeat;
     ce6:	19 cf       	rjmp	.-462    	; 0xb1a <main+0x276>
				}
				else if (valu==SELECT_LAMP_OFF)
     ce8:	80 33       	cpi	r24, 0x30	; 48
     cea:	09 f5       	brne	.+66     	; 0xd2e <main+0x48a>
				{
					LED_off(LED3_REG,LED3_PIN);
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 2d 04 	call	0x85a	; 0x85a <LED_off>
					LCD_writeString("LED3 Off");
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     d00:	8f e4       	ldi	r24, 0x4F	; 79
     d02:	93 ec       	ldi	r25, 0xC3	; 195
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <main+0x460>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <main+0x466>
     d0a:	00 00       	nop
					_delay_ms(200);
					LCD_clear();
     d0c:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					goto Repeat;
     d10:	04 cf       	rjmp	.-504    	; 0xb1a <main+0x276>
				}
				
				break;
				case SELECT_MOREOP:
				SelectMenu = 4;
				LCD_clear();
     d12:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				LCD_writeString("5>Lamp4 6>Lamp5");
     d16:	89 e4       	ldi	r24, 0x49	; 73
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
				LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_goToSpecificPosition>
				LCD_writeString("7>AirCond ");
     d26:	89 e5       	ldi	r24, 0x59	; 89
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
				break;
			}
			valu =0;
     d2e:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
			while(valu == 0){
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <main+0x498>
				KPD_getValue(&valu);
     d34:	8e e7       	ldi	r24, 0x7E	; 126
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
				LCD_goToSpecificPosition(LCD_LINE_TWO,0);
				LCD_writeString("7>AirCond ");
				break;
			}
			valu =0;
			while(valu == 0){
     d3c:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     d40:	88 23       	and	r24, r24
     d42:	c1 f3       	breq	.-16     	; 0xd34 <main+0x490>
				KPD_getValue(&valu);
			}
			
			switch(valu)
     d44:	85 33       	cpi	r24, 0x35	; 53
     d46:	21 f0       	breq	.+8      	; 0xd50 <main+0x4ac>
     d48:	87 33       	cpi	r24, 0x37	; 55
     d4a:	09 f4       	brne	.+2      	; 0xd4e <main+0x4aa>
     d4c:	47 c0       	rjmp	.+142    	; 0xddc <main+0x538>
     d4e:	65 ce       	rjmp	.-822    	; 0xa1a <main+0x176>
			{
				case SELECT_LAMP4:
				LCD_clear();
     d50:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				LCD_writeString("ON>ON 0>OFF");
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     d5c:	87 e8       	ldi	r24, 0x87	; 135
     d5e:	93 e1       	ldi	r25, 0x13	; 19
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <main+0x4bc>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <main+0x4c2>
     d66:	00 00       	nop
				_delay_ms(20);
				valu=0;
     d68:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
				while(valu == 0){
     d6c:	04 c0       	rjmp	.+8      	; 0xd76 <main+0x4d2>
					KPD_getValue(&valu);
     d6e:	8e e7       	ldi	r24, 0x7E	; 126
     d70:	92 e0       	ldi	r25, 0x02	; 2
     d72:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
				case SELECT_LAMP4:
				LCD_clear();
				LCD_writeString("ON>ON 0>OFF");
				_delay_ms(20);
				valu=0;
				while(valu == 0){
     d76:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     d7a:	88 23       	and	r24, r24
     d7c:	c1 f3       	breq	.-16     	; 0xd6e <main+0x4ca>
					KPD_getValue(&valu);
				};
				LCD_clear();
     d7e:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				if (valu == SELECT_LAMP_ON )
     d82:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     d86:	8a 32       	cpi	r24, 0x2A	; 42
     d88:	99 f4       	brne	.+38     	; 0xdb0 <main+0x50c>
				{
					LED_on(LED4_REG,LED4_PIN);
     d8a:	63 e0       	ldi	r22, 0x03	; 3
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 1e 04 	call	0x83c	; 0x83c <LED_on>
					LCD_writeString("LED4 ON...");
     d96:	84 e6       	ldi	r24, 0x64	; 100
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     d9e:	8f e4       	ldi	r24, 0x4F	; 79
     da0:	93 ec       	ldi	r25, 0xC3	; 195
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <main+0x4fe>
     da6:	00 c0       	rjmp	.+0      	; 0xda8 <main+0x504>
     da8:	00 00       	nop
					_delay_ms(200);
					LCD_clear();
     daa:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					goto Repeat;
     dae:	b5 ce       	rjmp	.-662    	; 0xb1a <main+0x276>
				}
				else if (valu==SELECT_LAMP_OFF)
     db0:	80 33       	cpi	r24, 0x30	; 48
     db2:	09 f0       	breq	.+2      	; 0xdb6 <main+0x512>
     db4:	32 ce       	rjmp	.-924    	; 0xa1a <main+0x176>
				{
					LED_off(LED4_REG,LED4_PIN);
     db6:	63 e0       	ldi	r22, 0x03	; 3
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 2d 04 	call	0x85a	; 0x85a <LED_off>
					LCD_writeString("LED4 Off");
     dc2:	8f e6       	ldi	r24, 0x6F	; 111
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     dca:	8f e4       	ldi	r24, 0x4F	; 79
     dcc:	93 ec       	ldi	r25, 0xC3	; 195
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <main+0x52a>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <main+0x530>
     dd4:	00 00       	nop
					_delay_ms(200);
					LCD_clear();
     dd6:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					goto Repeat;
     dda:	9f ce       	rjmp	.-706    	; 0xb1a <main+0x276>
				
				break;
				case SELECT_AIR_CONDITIONING:
				Repeat2:
				temprature==0;
				LCD_clear();
     ddc:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				
				LCD_writeString("1>SET 2>ON 3>OFF");
     de0:	88 e7       	ldi	r24, 0x78	; 120
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     de8:	87 e8       	ldi	r24, 0x87	; 135
     dea:	93 e1       	ldi	r25, 0x13	; 19
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <main+0x548>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <main+0x54e>
     df2:	00 00       	nop
				_delay_ms(20);
				valu=0;
     df4:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
				while(valu == 0){
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <main+0x55e>
					KPD_getValue(&valu);
     dfa:	8e e7       	ldi	r24, 0x7E	; 126
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
				LCD_clear();
				
				LCD_writeString("1>SET 2>ON 3>OFF");
				_delay_ms(20);
				valu=0;
				while(valu == 0){
     e02:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     e06:	88 23       	and	r24, r24
     e08:	c1 f3       	breq	.-16     	; 0xdfa <main+0x556>
					KPD_getValue(&valu);
				};
				
				switch(valu){
     e0a:	81 33       	cpi	r24, 0x31	; 49
     e0c:	09 f4       	brne	.+2      	; 0xe10 <main+0x56c>
     e0e:	6d c0       	rjmp	.+218    	; 0xeea <main+0x646>
     e10:	82 33       	cpi	r24, 0x32	; 50
     e12:	09 f4       	brne	.+2      	; 0xe16 <main+0x572>
     e14:	6f c0       	rjmp	.+222    	; 0xef4 <main+0x650>
     e16:	01 ce       	rjmp	.-1022   	; 0xa1a <main+0x176>
					case '1':
					
					while (temprature==0)
					{
						valu=0;
     e18:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
						LCD_clear();
     e1c:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
						LCD_writeString("Set Temp:__");
     e20:	89 e8       	ldi	r24, 0x89	; 137
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
						LCD_goToSpecificPosition(LCD_LINE_ONE,11);
     e28:	6b e0       	ldi	r22, 0x0B	; 11
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_goToSpecificPosition>
     e30:	8f e4       	ldi	r24, 0x4F	; 79
     e32:	93 ec       	ldi	r25, 0xC3	; 195
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <main+0x590>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <main+0x596>
     e3a:	00 00       	nop
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <main+0x5a2>
						_delay_ms(200);
						while(valu == 0){
							KPD_getValue(&valu);
     e3e:	8e e7       	ldi	r24, 0x7E	; 126
     e40:	92 e0       	ldi	r25, 0x02	; 2
     e42:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
						valu=0;
						LCD_clear();
						LCD_writeString("Set Temp:__");
						LCD_goToSpecificPosition(LCD_LINE_ONE,11);
						_delay_ms(200);
						while(valu == 0){
     e46:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     e4a:	88 23       	and	r24, r24
     e4c:	c1 f3       	breq	.-16     	; 0xe3e <main+0x59a>
     e4e:	8f e4       	ldi	r24, 0x4F	; 79
     e50:	93 ec       	ldi	r25, 0xC3	; 195
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <main+0x5ae>
     e56:	00 c0       	rjmp	.+0      	; 0xe58 <main+0x5b4>
     e58:	00 00       	nop
							KPD_getValue(&valu);
						};
						_delay_ms(200);
						LCD_sendChar(valu);
     e5a:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     e5e:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_sendChar>
						temp=valu-'0';
     e62:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     e66:	80 53       	subi	r24, 0x30	; 48
     e68:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <temp>
						
						valu=0;
     e6c:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <valu>
						while(valu == 0){
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <main+0x5d6>
							KPD_getValue(&valu);
     e72:	8e e7       	ldi	r24, 0x7E	; 126
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	0e 94 55 02 	call	0x4aa	; 0x4aa <KPD_getValue>
						_delay_ms(200);
						LCD_sendChar(valu);
						temp=valu-'0';
						
						valu=0;
						while(valu == 0){
     e7a:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     e7e:	88 23       	and	r24, r24
     e80:	c1 f3       	breq	.-16     	; 0xe72 <main+0x5ce>
     e82:	8f e4       	ldi	r24, 0x4F	; 79
     e84:	93 ec       	ldi	r25, 0xC3	; 195
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <main+0x5e2>
     e8a:	00 c0       	rjmp	.+0      	; 0xe8c <main+0x5e8>
     e8c:	00 00       	nop
							KPD_getValue(&valu);
						};
						_delay_ms(200);
						LCD_sendChar(valu);
     e8e:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     e92:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_sendChar>
						temp_2=valu-'0';
     e96:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <valu>
     e9a:	80 53       	subi	r24, 0x30	; 48
     e9c:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <temp_2>
						
						temprature=(temp*10)+temp_2;
     ea0:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <temp>
     ea4:	99 0f       	add	r25, r25
     ea6:	29 2f       	mov	r18, r25
     ea8:	22 0f       	add	r18, r18
     eaa:	22 0f       	add	r18, r18
     eac:	92 0f       	add	r25, r18
     eae:	89 0f       	add	r24, r25
     eb0:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <temprature>
     eb4:	9f e7       	ldi	r25, 0x7F	; 127
     eb6:	2a e1       	ldi	r18, 0x1A	; 26
     eb8:	86 e0       	ldi	r24, 0x06	; 6
     eba:	91 50       	subi	r25, 0x01	; 1
     ebc:	20 40       	sbci	r18, 0x00	; 0
     ebe:	80 40       	sbci	r24, 0x00	; 0
     ec0:	e1 f7       	brne	.-8      	; 0xeba <main+0x616>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <main+0x620>
     ec4:	00 00       	nop
						
						_delay_ms(2000);
						LCD_clear();
     ec6:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
						LCD_writeString("Temp set");
     eca:	85 e9       	ldi	r24, 0x95	; 149
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     ed2:	9f e7       	ldi	r25, 0x7F	; 127
     ed4:	2a e1       	ldi	r18, 0x1A	; 26
     ed6:	86 e0       	ldi	r24, 0x06	; 6
     ed8:	91 50       	subi	r25, 0x01	; 1
     eda:	20 40       	sbci	r18, 0x00	; 0
     edc:	80 40       	sbci	r24, 0x00	; 0
     ede:	e1 f7       	brne	.-8      	; 0xed8 <main+0x634>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <main+0x63e>
     ee2:	00 00       	nop
						_delay_ms(2000);
						LCD_clear();
     ee4:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
						
						goto Repeat2;
     ee8:	79 cf       	rjmp	.-270    	; 0xddc <main+0x538>
				};
				
				switch(valu){
					case '1':
					
					while (temprature==0)
     eea:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <temprature>
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <main+0x650>
     ef2:	92 cf       	rjmp	.-220    	; 0xe18 <main+0x574>
						goto Repeat2;
					}
					
					case '2':
					
					LCD_clear();
     ef4:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					ADC_getDigital(ADC_CHANNEL1,  &DigitalValue);
     ef8:	64 e8       	ldi	r22, 0x84	; 132
     efa:	72 e0       	ldi	r23, 0x02	; 2
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_getDigital>
					analoge=((DigitalValue*5000UL)/1024);
     f02:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <DigitalValue>
     f06:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <DigitalValue+0x1>
     f0a:	a8 e8       	ldi	r26, 0x88	; 136
     f0c:	b3 e1       	ldi	r27, 0x13	; 19
     f0e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__umulhisi3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	07 2e       	mov	r0, r23
     f18:	7a e0       	ldi	r23, 0x0A	; 10
     f1a:	b6 95       	lsr	r27
     f1c:	a7 95       	ror	r26
     f1e:	97 95       	ror	r25
     f20:	87 95       	ror	r24
     f22:	7a 95       	dec	r23
     f24:	d1 f7       	brne	.-12     	; 0xf1a <main+0x676>
     f26:	70 2d       	mov	r23, r0
					analoge=analoge/10;
     f28:	2d ec       	ldi	r18, 0xCD	; 205
     f2a:	82 9f       	mul	r24, r18
     f2c:	61 2d       	mov	r22, r1
     f2e:	11 24       	eor	r1, r1
     f30:	66 95       	lsr	r22
     f32:	66 95       	lsr	r22
     f34:	66 95       	lsr	r22
     f36:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <analoge>
					if(analoge>temprature)
     f3a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <temprature>
     f3e:	86 17       	cp	r24, r22
     f40:	f8 f4       	brcc	.+62     	; 0xf80 <main+0x6dc>
     f42:	9f e7       	ldi	r25, 0x7F	; 127
     f44:	2a e1       	ldi	r18, 0x1A	; 26
     f46:	86 e0       	ldi	r24, 0x06	; 6
     f48:	91 50       	subi	r25, 0x01	; 1
     f4a:	20 40       	sbci	r18, 0x00	; 0
     f4c:	80 40       	sbci	r24, 0x00	; 0
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <main+0x6a4>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <main+0x6ae>
     f52:	00 00       	nop
					{
						_delay_ms(2000);
						LCD_writeString("AIR CON IS ON");
     f54:	8e e9       	ldi	r24, 0x9E	; 158
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     f5c:	9f e5       	ldi	r25, 0x5F	; 95
     f5e:	2a ee       	ldi	r18, 0xEA	; 234
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	91 50       	subi	r25, 0x01	; 1
     f64:	20 40       	sbci	r18, 0x00	; 0
     f66:	80 40       	sbci	r24, 0x00	; 0
     f68:	e1 f7       	brne	.-8      	; 0xf62 <main+0x6be>
     f6a:	00 c0       	rjmp	.+0      	; 0xf6c <main+0x6c8>
     f6c:	00 00       	nop
						_delay_ms(300);
						LCD_clear();
     f6e:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
     f72:	8f e4       	ldi	r24, 0x4F	; 79
     f74:	93 ec       	ldi	r25, 0xC3	; 195
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <main+0x6d2>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <main+0x6d8>
     f7c:	00 00       	nop
     f7e:	2e cf       	rjmp	.-420    	; 0xddc <main+0x538>
					_delay_ms(200);
					goto Repeat2;
					}
					
					
					else if(analoge<temprature)
     f80:	68 17       	cp	r22, r24
     f82:	08 f0       	brcs	.+2      	; 0xf86 <main+0x6e2>
     f84:	4a cd       	rjmp	.-1388   	; 0xa1a <main+0x176>
					{
						LCD_writeString("AIR CON Fan Mode");
     f86:	8c ea       	ldi	r24, 0xAC	; 172
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     f8e:	9f eb       	ldi	r25, 0xBF	; 191
     f90:	27 e2       	ldi	r18, 0x27	; 39
     f92:	89 e0       	ldi	r24, 0x09	; 9
     f94:	91 50       	subi	r25, 0x01	; 1
     f96:	20 40       	sbci	r18, 0x00	; 0
     f98:	80 40       	sbci	r24, 0x00	; 0
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <main+0x6f0>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <main+0x6fa>
     f9e:	00 00       	nop
						_delay_ms(3000);
						LCD_clear();
     fa0:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
     fa4:	8f e4       	ldi	r24, 0x4F	; 79
     fa6:	93 ec       	ldi	r25, 0xC3	; 195
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <main+0x704>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <main+0x70a>
     fae:	00 00       	nop
     fb0:	15 cf       	rjmp	.-470    	; 0xddc <main+0x538>
			
			}
			
			
		}
		else if(result==0)
     fb2:	81 11       	cpse	r24, r1
     fb4:	32 cd       	rjmp	.-1436   	; 0xa1a <main+0x176>
		{
			LCD_writeString("wrong pass!");
     fb6:	8d eb       	ldi	r24, 0xBD	; 189
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
     fbe:	9f ef       	ldi	r25, 0xFF	; 255
     fc0:	28 e0       	ldi	r18, 0x08	; 8
     fc2:	8d e3       	ldi	r24, 0x3D	; 61
     fc4:	91 50       	subi	r25, 0x01	; 1
     fc6:	20 40       	sbci	r18, 0x00	; 0
     fc8:	80 40       	sbci	r24, 0x00	; 0
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <main+0x720>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <main+0x72a>
     fce:	00 00       	nop
			_delay_ms(20000);
			LCD_clear();
     fd0:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
			LCD_writeString("Try Again!");
     fd4:	89 ec       	ldi	r24, 0xC9	; 201
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
			static NumOfTrail;
			NumOfTrail++;
     fdc:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
     fe0:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <__data_end+0x1>
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <__data_end+0x1>
     fea:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
			if(NumOfTrail==3)
     fee:	03 97       	sbiw	r24, 0x03	; 3
     ff0:	09 f0       	breq	.+2      	; 0xff4 <main+0x750>
     ff2:	13 cd       	rjmp	.-1498   	; 0xa1a <main+0x176>
			{
				DIO_setPinDeriction(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
     ff4:	41 e0       	ldi	r20, 0x01	; 1
     ff6:	67 e0       	ldi	r22, 0x07	; 7
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	0e 94 76 00 	call	0xec	; 0xec <DIO_setPinDeriction>
				DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
     ffe:	41 e0       	ldi	r20, 0x01	; 1
    1000:	67 e0       	ldi	r22, 0x07	; 7
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_setPinValue>
				
				
			}
		}
	
	}
    1008:	08 cd       	rjmp	.-1520   	; 0xa1a <main+0x176>
}


else if(valu==ADMIN)
    100a:	81 33       	cpi	r24, 0x31	; 49
    100c:	09 f0       	breq	.+2      	; 0x1010 <main+0x76c>
    100e:	41 c1       	rjmp	.+642    	; 0x1292 <main+0x9ee>
{
	LCD_clear();
    1010:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
	LCD_writeString("Welcome to");
    1014:	88 eb       	ldi	r24, 0xB8	; 184
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
	LCD_goToSpecificPosition(LCD_LINE_TWO,0);
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_goToSpecificPosition>
	LCD_writeString("ADMIN Mode");
    1024:	84 ed       	ldi	r24, 0xD4	; 212
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
	char c;
	UART_init(9600);
    102c:	60 e8       	ldi	r22, 0x80	; 128
    102e:	75 e2       	ldi	r23, 0x25	; 37
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UART_init>
	Repeat1:
	UART_SendString("1>LAMP1 2>LAMP2 3>LAMP3 4>MORE");
    1038:	8f ed       	ldi	r24, 0xDF	; 223
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	0e 94 21 0a 	call	0x1442	; 0x1442 <UART_SendString>
	
	while(1)
	{
		
		c=UART_RxChar();
    1040:	0e 94 19 0a 	call	0x1432	; 0x1432 <UART_RxChar>
		
		
		switch(c)
    1044:	82 33       	cpi	r24, 0x32	; 50
    1046:	09 f4       	brne	.+2      	; 0x104a <main+0x7a6>
    1048:	42 c0       	rjmp	.+132    	; 0x10ce <main+0x82a>
    104a:	18 f4       	brcc	.+6      	; 0x1052 <main+0x7ae>
    104c:	81 33       	cpi	r24, 0x31	; 49
    104e:	41 f0       	breq	.+16     	; 0x1060 <main+0x7bc>
    1050:	f7 cf       	rjmp	.-18     	; 0x1040 <main+0x79c>
    1052:	83 33       	cpi	r24, 0x33	; 51
    1054:	09 f4       	brne	.+2      	; 0x1058 <main+0x7b4>
    1056:	72 c0       	rjmp	.+228    	; 0x113c <main+0x898>
    1058:	84 33       	cpi	r24, 0x34	; 52
    105a:	09 f4       	brne	.+2      	; 0x105e <main+0x7ba>
    105c:	a6 c0       	rjmp	.+332    	; 0x11aa <main+0x906>
    105e:	f0 cf       	rjmp	.-32     	; 0x1040 <main+0x79c>
		{
			case '1':
					c=UART_RxChar();
    1060:	0e 94 19 0a 	call	0x1432	; 0x1432 <UART_RxChar>
    1064:	18 2f       	mov	r17, r24
					UART_SendString("1>ON 0>OFF");
    1066:	8e ef       	ldi	r24, 0xFE	; 254
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 21 0a 	call	0x1442	; 0x1442 <UART_SendString>
					switch(c){
    106e:	10 33       	cpi	r17, 0x30	; 48
    1070:	c1 f0       	breq	.+48     	; 0x10a2 <main+0x7fe>
    1072:	11 33       	cpi	r17, 0x31	; 49
    1074:	29 f7       	brne	.-54     	; 0x1040 <main+0x79c>
					case '1':
						LED_on(LED1_REG,LED1_PIN);
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 1e 04 	call	0x83c	; 0x83c <LED_on>
						LCD_writeString("LED1 ON...");
    1082:	8d e0       	ldi	r24, 0x0D	; 13
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
    108a:	9f e7       	ldi	r25, 0x7F	; 127
    108c:	2a e1       	ldi	r18, 0x1A	; 26
    108e:	86 e0       	ldi	r24, 0x06	; 6
    1090:	91 50       	subi	r25, 0x01	; 1
    1092:	20 40       	sbci	r18, 0x00	; 0
    1094:	80 40       	sbci	r24, 0x00	; 0
    1096:	e1 f7       	brne	.-8      	; 0x1090 <main+0x7ec>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <main+0x7f6>
    109a:	00 00       	nop
						_delay_ms(2000);
						LCD_clear();
    109c:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
						goto Repeat1;
    10a0:	cb cf       	rjmp	.-106    	; 0x1038 <main+0x794>
					
					break;
					case '0':
					
						LED_off(LED1_REG,LED1_PIN);
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 2d 04 	call	0x85a	; 0x85a <LED_off>
						LCD_writeString("LED1 OFF...");
    10ae:	89 e0       	ldi	r24, 0x09	; 9
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
    10b6:	9f e7       	ldi	r25, 0x7F	; 127
    10b8:	2a e1       	ldi	r18, 0x1A	; 26
    10ba:	86 e0       	ldi	r24, 0x06	; 6
    10bc:	91 50       	subi	r25, 0x01	; 1
    10be:	20 40       	sbci	r18, 0x00	; 0
    10c0:	80 40       	sbci	r24, 0x00	; 0
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <main+0x818>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <main+0x822>
    10c6:	00 00       	nop
						_delay_ms(2000);
						LCD_clear();
    10c8:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
						goto Repeat1;
    10cc:	b5 cf       	rjmp	.-150    	; 0x1038 <main+0x794>
			break;
				
			break;
				
			case '2':
			c=UART_RxChar();
    10ce:	0e 94 19 0a 	call	0x1432	; 0x1432 <UART_RxChar>
    10d2:	18 2f       	mov	r17, r24
			UART_SendString("1>ON 0>OFF");
    10d4:	8e ef       	ldi	r24, 0xFE	; 254
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 21 0a 	call	0x1442	; 0x1442 <UART_SendString>
			switch(c){
    10dc:	10 33       	cpi	r17, 0x30	; 48
    10de:	c1 f0       	breq	.+48     	; 0x1110 <main+0x86c>
    10e0:	11 33       	cpi	r17, 0x31	; 49
    10e2:	61 f5       	brne	.+88     	; 0x113c <main+0x898>
				case '1':
				LED_on(LED2_REG,LED2_PIN);
    10e4:	62 e0       	ldi	r22, 0x02	; 2
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 1e 04 	call	0x83c	; 0x83c <LED_on>
				LCD_writeString("LED2 ON...");
    10f0:	81 e2       	ldi	r24, 0x21	; 33
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
    10f8:	9f e7       	ldi	r25, 0x7F	; 127
    10fa:	2a e1       	ldi	r18, 0x1A	; 26
    10fc:	86 e0       	ldi	r24, 0x06	; 6
    10fe:	91 50       	subi	r25, 0x01	; 1
    1100:	20 40       	sbci	r18, 0x00	; 0
    1102:	80 40       	sbci	r24, 0x00	; 0
    1104:	e1 f7       	brne	.-8      	; 0x10fe <main+0x85a>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <main+0x864>
    1108:	00 00       	nop
				_delay_ms(2000);
				LCD_clear();
    110a:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				goto Repeat1;
    110e:	94 cf       	rjmp	.-216    	; 0x1038 <main+0x794>
				
				break;
				case '0':
				
				LED_off(LED2_REG,LED2_PIN);
    1110:	62 e0       	ldi	r22, 0x02	; 2
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 2d 04 	call	0x85a	; 0x85a <LED_off>
				LCD_writeString("LED2 OFF...");
    111c:	85 e1       	ldi	r24, 0x15	; 21
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
    1124:	9f e7       	ldi	r25, 0x7F	; 127
    1126:	2a e1       	ldi	r18, 0x1A	; 26
    1128:	86 e0       	ldi	r24, 0x06	; 6
    112a:	91 50       	subi	r25, 0x01	; 1
    112c:	20 40       	sbci	r18, 0x00	; 0
    112e:	80 40       	sbci	r24, 0x00	; 0
    1130:	e1 f7       	brne	.-8      	; 0x112a <main+0x886>
    1132:	00 c0       	rjmp	.+0      	; 0x1134 <main+0x890>
    1134:	00 00       	nop
				_delay_ms(2000);
				LCD_clear();
    1136:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				goto Repeat1;
    113a:	7e cf       	rjmp	.-260    	; 0x1038 <main+0x794>
				break;
			}
			
			case '3':
			c=UART_RxChar();
    113c:	0e 94 19 0a 	call	0x1432	; 0x1432 <UART_RxChar>
    1140:	18 2f       	mov	r17, r24
			UART_SendString("1>ON 0>OFF");
    1142:	8e ef       	ldi	r24, 0xFE	; 254
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 21 0a 	call	0x1442	; 0x1442 <UART_SendString>
			switch(c){
    114a:	10 33       	cpi	r17, 0x30	; 48
    114c:	c1 f0       	breq	.+48     	; 0x117e <main+0x8da>
    114e:	11 33       	cpi	r17, 0x31	; 49
    1150:	61 f5       	brne	.+88     	; 0x11aa <main+0x906>
				case '1':
				LED_on(LED3_REG,LED3_PIN);
    1152:	62 e0       	ldi	r22, 0x02	; 2
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 1e 04 	call	0x83c	; 0x83c <LED_on>
				LCD_writeString("LED3 ON...");
    115e:	85 e3       	ldi	r24, 0x35	; 53
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
    1166:	9f e7       	ldi	r25, 0x7F	; 127
    1168:	2a e1       	ldi	r18, 0x1A	; 26
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	91 50       	subi	r25, 0x01	; 1
    116e:	20 40       	sbci	r18, 0x00	; 0
    1170:	80 40       	sbci	r24, 0x00	; 0
    1172:	e1 f7       	brne	.-8      	; 0x116c <main+0x8c8>
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <main+0x8d2>
    1176:	00 00       	nop
				_delay_ms(2000);
				LCD_clear();
    1178:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				goto Repeat1;
    117c:	5d cf       	rjmp	.-326    	; 0x1038 <main+0x794>
				
				break;
				case '0':
				
				LED_off(LED3_REG,LED3_PIN);
    117e:	62 e0       	ldi	r22, 0x02	; 2
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 2d 04 	call	0x85a	; 0x85a <LED_off>
				LCD_writeString("LED3 OFF...");
    118a:	81 e2       	ldi	r24, 0x21	; 33
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
    1192:	9f e7       	ldi	r25, 0x7F	; 127
    1194:	2a e1       	ldi	r18, 0x1A	; 26
    1196:	86 e0       	ldi	r24, 0x06	; 6
    1198:	91 50       	subi	r25, 0x01	; 1
    119a:	20 40       	sbci	r18, 0x00	; 0
    119c:	80 40       	sbci	r24, 0x00	; 0
    119e:	e1 f7       	brne	.-8      	; 0x1198 <main+0x8f4>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <main+0x8fe>
    11a2:	00 00       	nop
				_delay_ms(2000);
				LCD_clear();
    11a4:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
				goto Repeat1;
    11a8:	47 cf       	rjmp	.-370    	; 0x1038 <main+0x794>
				break;
			}
			
			case '4':
			c=UART_RxChar();
    11aa:	0e 94 19 0a 	call	0x1432	; 0x1432 <UART_RxChar>
    11ae:	18 2f       	mov	r17, r24
			UART_SendString("5>LAMP4 6>DOOR 7>AIRCon");
    11b0:	8d e2       	ldi	r24, 0x2D	; 45
    11b2:	92 e0       	ldi	r25, 0x02	; 2
    11b4:	0e 94 21 0a 	call	0x1442	; 0x1442 <UART_SendString>
			switch(c){
    11b8:	15 33       	cpi	r17, 0x35	; 53
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <main+0x91e>
    11bc:	16 33       	cpi	r17, 0x36	; 54
    11be:	c9 f1       	breq	.+114    	; 0x1232 <main+0x98e>
    11c0:	3f cf       	rjmp	.-386    	; 0x1040 <main+0x79c>
				case '5':
				c=UART_RxChar();
    11c2:	0e 94 19 0a 	call	0x1432	; 0x1432 <UART_RxChar>
    11c6:	18 2f       	mov	r17, r24
				UART_SendString("1>ON 0>OFF");
    11c8:	8e ef       	ldi	r24, 0xFE	; 254
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	0e 94 21 0a 	call	0x1442	; 0x1442 <UART_SendString>
				switch(c){
    11d0:	10 33       	cpi	r17, 0x30	; 48
    11d2:	c9 f0       	breq	.+50     	; 0x1206 <main+0x962>
    11d4:	11 33       	cpi	r17, 0x31	; 49
    11d6:	09 f0       	breq	.+2      	; 0x11da <main+0x936>
    11d8:	33 cf       	rjmp	.-410    	; 0x1040 <main+0x79c>
					case '1':
					LED_on(LED4_REG,LED4_PIN);
    11da:	63 e0       	ldi	r22, 0x03	; 3
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 1e 04 	call	0x83c	; 0x83c <LED_on>
					LCD_writeString("LED4 ON...");
    11e6:	84 e6       	ldi	r24, 0x64	; 100
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
    11ee:	9f e7       	ldi	r25, 0x7F	; 127
    11f0:	2a e1       	ldi	r18, 0x1A	; 26
    11f2:	86 e0       	ldi	r24, 0x06	; 6
    11f4:	91 50       	subi	r25, 0x01	; 1
    11f6:	20 40       	sbci	r18, 0x00	; 0
    11f8:	80 40       	sbci	r24, 0x00	; 0
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <main+0x950>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <main+0x95a>
    11fe:	00 00       	nop
					_delay_ms(2000);
					LCD_clear();
    1200:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					goto Repeat1;
    1204:	19 cf       	rjmp	.-462    	; 0x1038 <main+0x794>
					
					break;
					case '0':
					
					LED_off(LED4_REG,LED4_PIN);
    1206:	63 e0       	ldi	r22, 0x03	; 3
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 2d 04 	call	0x85a	; 0x85a <LED_off>
					LCD_writeString("LED4 OFF...");
    1212:	85 e4       	ldi	r24, 0x45	; 69
    1214:	92 e0       	ldi	r25, 0x02	; 2
    1216:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
    121a:	9f e7       	ldi	r25, 0x7F	; 127
    121c:	2a e1       	ldi	r18, 0x1A	; 26
    121e:	86 e0       	ldi	r24, 0x06	; 6
    1220:	91 50       	subi	r25, 0x01	; 1
    1222:	20 40       	sbci	r18, 0x00	; 0
    1224:	80 40       	sbci	r24, 0x00	; 0
    1226:	e1 f7       	brne	.-8      	; 0x1220 <main+0x97c>
    1228:	00 c0       	rjmp	.+0      	; 0x122a <main+0x986>
    122a:	00 00       	nop
					_delay_ms(2000);
					LCD_clear();
    122c:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					goto Repeat1;
    1230:	03 cf       	rjmp	.-506    	; 0x1038 <main+0x794>
					break;
				}
				break;
				
				case '6':
				c=UART_RxChar();
    1232:	0e 94 19 0a 	call	0x1432	; 0x1432 <UART_RxChar>
    1236:	18 2f       	mov	r17, r24
				UART_SendString("1>Open 0>close");
    1238:	81 e5       	ldi	r24, 0x51	; 81
    123a:	92 e0       	ldi	r25, 0x02	; 2
    123c:	0e 94 21 0a 	call	0x1442	; 0x1442 <UART_SendString>
				switch(c){
    1240:	10 33       	cpi	r17, 0x30	; 48
    1242:	a9 f0       	breq	.+42     	; 0x126e <main+0x9ca>
    1244:	11 33       	cpi	r17, 0x31	; 49
    1246:	09 f0       	breq	.+2      	; 0x124a <main+0x9a6>
    1248:	fb ce       	rjmp	.-522    	; 0x1040 <main+0x79c>
					case '1':
					DOOR_Open();
    124a:	0e 94 c8 01 	call	0x390	; 0x390 <DOOR_Open>
					LCD_writeString("DOOR OPEN...");
    124e:	80 e6       	ldi	r24, 0x60	; 96
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
    1256:	9f e7       	ldi	r25, 0x7F	; 127
    1258:	2a e1       	ldi	r18, 0x1A	; 26
    125a:	86 e0       	ldi	r24, 0x06	; 6
    125c:	91 50       	subi	r25, 0x01	; 1
    125e:	20 40       	sbci	r18, 0x00	; 0
    1260:	80 40       	sbci	r24, 0x00	; 0
    1262:	e1 f7       	brne	.-8      	; 0x125c <main+0x9b8>
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <main+0x9c2>
    1266:	00 00       	nop
					_delay_ms(2000);
					LCD_clear();
    1268:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					goto Repeat1;
    126c:	e5 ce       	rjmp	.-566    	; 0x1038 <main+0x794>
					
					break;
					case '0':
					LCD_writeString("DOOR CLOSE...");
    126e:	8d e6       	ldi	r24, 0x6D	; 109
    1270:	92 e0       	ldi	r25, 0x02	; 2
    1272:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_writeString>
					DOOR_Close();
    1276:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <DOOR_Close>
    127a:	9f e7       	ldi	r25, 0x7F	; 127
    127c:	2a e1       	ldi	r18, 0x1A	; 26
    127e:	86 e0       	ldi	r24, 0x06	; 6
    1280:	91 50       	subi	r25, 0x01	; 1
    1282:	20 40       	sbci	r18, 0x00	; 0
    1284:	80 40       	sbci	r24, 0x00	; 0
    1286:	e1 f7       	brne	.-8      	; 0x1280 <main+0x9dc>
    1288:	00 c0       	rjmp	.+0      	; 0x128a <main+0x9e6>
    128a:	00 00       	nop
					_delay_ms(2000);
					LCD_clear();
    128c:	0e 94 02 04 	call	0x804	; 0x804 <LCD_clear>
					goto Repeat1;
    1290:	d3 ce       	rjmp	.-602    	; 0x1038 <main+0x794>
			
 
	/********		*/
 }
}
}
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	08 95       	ret

000012a8 <TIMER1_init>:
#include "TIMER1_Config.h"

void TIMER1_init(void)
{
	// Choose Mode 14
	CLR_BIT(TCCR1A,0);
    12a8:	8f b5       	in	r24, 0x2f	; 47
    12aa:	8e 7f       	andi	r24, 0xFE	; 254
    12ac:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,1);
    12ae:	8f b5       	in	r24, 0x2f	; 47
    12b0:	82 60       	ori	r24, 0x02	; 2
    12b2:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,3);
    12b4:	8e b5       	in	r24, 0x2e	; 46
    12b6:	88 60       	ori	r24, 0x08	; 8
    12b8:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,4);
    12ba:	8e b5       	in	r24, 0x2e	; 46
    12bc:	80 61       	ori	r24, 0x10	; 16
    12be:	8e bd       	out	0x2e, r24	; 46
	
	// Selecting Non Inverting Mode
	CLR_BIT(TCCR1A,6);
    12c0:	8f b5       	in	r24, 0x2f	; 47
    12c2:	8f 7b       	andi	r24, 0xBF	; 191
    12c4:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,7);
    12c6:	8f b5       	in	r24, 0x2f	; 47
    12c8:	80 68       	ori	r24, 0x80	; 128
    12ca:	8f bd       	out	0x2f, r24	; 47
	
	// Set pin OC1A as Output Pin
	SET_BIT(DDRD,5);	
    12cc:	81 b3       	in	r24, 0x11	; 17
    12ce:	80 62       	ori	r24, 0x20	; 32
    12d0:	81 bb       	out	0x11, r24	; 17
	
	// ICR1 --> Period time = 20ms --> Freq. = 50HZ ("TIMER1_Config.h")
ICR1_u16 = ICR11_u16;
    12d2:	87 e8       	ldi	r24, 0x87	; 135
    12d4:	93 e1       	ldi	r25, 0x13	; 19
    12d6:	97 bd       	out	0x27, r25	; 39
    12d8:	86 bd       	out	0x26, r24	; 38
    12da:	08 95       	ret

000012dc <TIMER1_start>:
}

void TIMER1_start(void)
{
	// Select Pre-scaler Value = 64
	SET_BIT(TCCR1B,0);
    12dc:	8e b5       	in	r24, 0x2e	; 46
    12de:	81 60       	ori	r24, 0x01	; 1
    12e0:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,1);
    12e2:	8e b5       	in	r24, 0x2e	; 46
    12e4:	82 60       	ori	r24, 0x02	; 2
    12e6:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
    12e8:	8e b5       	in	r24, 0x2e	; 46
    12ea:	8b 7f       	andi	r24, 0xFB	; 251
    12ec:	8e bd       	out	0x2e, r24	; 46
    12ee:	08 95       	ret

000012f0 <TIMER1_setCompareMatchValueA>:
}

void TIMER1_setCompareMatchValueA(u16 Value)
{
	// Init TIMER1 With Compare Value
	OCR1A_u16 = Value;
    12f0:	9b bd       	out	0x2b, r25	; 43
    12f2:	8a bd       	out	0x2a, r24	; 42
    12f4:	08 95       	ret

000012f6 <TWI_initMaster>:


void TWI_initMaster(void)
{
	// Set Prescaller = 1 >> Set Freq. = 400KHZ
	TWBR = 12;
    12f6:	8c e0       	ldi	r24, 0x0C	; 12
    12f8:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR,0);
    12fa:	81 b1       	in	r24, 0x01	; 1
    12fc:	8e 7f       	andi	r24, 0xFE	; 254
    12fe:	81 b9       	out	0x01, r24	; 1
	CLR_BIT(TWSR,1);
    1300:	81 b1       	in	r24, 0x01	; 1
    1302:	8d 7f       	andi	r24, 0xFD	; 253
    1304:	81 b9       	out	0x01, r24	; 1
	
	// Enable ACK
	SET_BIT(TWCR,6);
    1306:	86 b7       	in	r24, 0x36	; 54
    1308:	80 64       	ori	r24, 0x40	; 64
    130a:	86 bf       	out	0x36, r24	; 54
	
	// Enable TWI
	SET_BIT(TWCR,2);
    130c:	86 b7       	in	r24, 0x36	; 54
    130e:	84 60       	ori	r24, 0x04	; 4
    1310:	86 bf       	out	0x36, r24	; 54
    1312:	08 95       	ret

00001314 <TWI_sendStartCondition>:


void TWI_sendStartCondition(void)
{
	// Send Start Condition
	SET_BIT(TWCR,5);
    1314:	86 b7       	in	r24, 0x36	; 54
    1316:	80 62       	ori	r24, 0x20	; 32
    1318:	86 bf       	out	0x36, r24	; 54

    // Clear flag to start current job
	SET_BIT(TWCR,7);
    131a:	86 b7       	in	r24, 0x36	; 54
    131c:	80 68       	ori	r24, 0x80	; 128
    131e:	86 bf       	out	0x36, r24	; 54
	
	// Wait for the flag
	while( 0 == GET_BIT(TWCR,7));
    1320:	06 b6       	in	r0, 0x36	; 54
    1322:	07 fe       	sbrs	r0, 7
    1324:	fd cf       	rjmp	.-6      	; 0x1320 <TWI_sendStartCondition+0xc>
	
	// Check ACK = SC ACK
	while((TWSR & 0xF8) != 0x08);
    1326:	81 b1       	in	r24, 0x01	; 1
    1328:	88 7f       	andi	r24, 0xF8	; 248
    132a:	88 30       	cpi	r24, 0x08	; 8
    132c:	e1 f7       	brne	.-8      	; 0x1326 <TWI_sendStartCondition+0x12>
}
    132e:	08 95       	ret

00001330 <TWI_sendRepStartCondition>:


void TWI_sendRepStartCondition(void)
{
	// Send Start Condition
	SET_BIT(TWCR,5);
    1330:	86 b7       	in	r24, 0x36	; 54
    1332:	80 62       	ori	r24, 0x20	; 32
    1334:	86 bf       	out	0x36, r24	; 54

    // Clear flag to start current job
	SET_BIT(TWCR,7);
    1336:	86 b7       	in	r24, 0x36	; 54
    1338:	80 68       	ori	r24, 0x80	; 128
    133a:	86 bf       	out	0x36, r24	; 54
	
	// Wait for the flag
	while( 0 == GET_BIT(TWCR,7));
    133c:	06 b6       	in	r0, 0x36	; 54
    133e:	07 fe       	sbrs	r0, 7
    1340:	fd cf       	rjmp	.-6      	; 0x133c <TWI_sendRepStartCondition+0xc>
	
	// Check ACK = Repeated SC ACK
	while((TWSR & 0xF8) != 0x10);
    1342:	81 b1       	in	r24, 0x01	; 1
    1344:	88 7f       	andi	r24, 0xF8	; 248
    1346:	80 31       	cpi	r24, 0x10	; 16
    1348:	e1 f7       	brne	.-8      	; 0x1342 <TWI_sendRepStartCondition+0x12>
}
    134a:	08 95       	ret

0000134c <TWI_sendStopCondition>:


void TWI_sendStopCondition(void)
{
	// Send Stop Condition
	SET_BIT(TWCR,4);
    134c:	86 b7       	in	r24, 0x36	; 54
    134e:	80 61       	ori	r24, 0x10	; 16
    1350:	86 bf       	out	0x36, r24	; 54
	
	// Clear flag to start current job
	SET_BIT(TWCR,7);
    1352:	86 b7       	in	r24, 0x36	; 54
    1354:	80 68       	ori	r24, 0x80	; 128
    1356:	86 bf       	out	0x36, r24	; 54
    1358:	08 95       	ret

0000135a <TWI_sendSlaveAddWithWrite>:


void TWI_sendSlaveAddWithWrite(u8 slaveAdd)
{
	// Send slave address
	TWDR = slaveAdd<<1;
    135a:	88 0f       	add	r24, r24
    135c:	83 b9       	out	0x03, r24	; 3
	
	// Select write operation
	CLR_BIT(TWDR,0);
    135e:	83 b1       	in	r24, 0x03	; 3
    1360:	8e 7f       	andi	r24, 0xFE	; 254
    1362:	83 b9       	out	0x03, r24	; 3
	
	// Clear SC bit
	CLR_BIT(TWCR,5);
    1364:	86 b7       	in	r24, 0x36	; 54
    1366:	8f 7d       	andi	r24, 0xDF	; 223
    1368:	86 bf       	out	0x36, r24	; 54
	
	// Clear flag to start current job
	SET_BIT(TWCR,7);
    136a:	86 b7       	in	r24, 0x36	; 54
    136c:	80 68       	ori	r24, 0x80	; 128
    136e:	86 bf       	out	0x36, r24	; 54
	
	// Wait for the flag
	while(0 == GET_BIT(TWCR,7));
    1370:	06 b6       	in	r0, 0x36	; 54
    1372:	07 fe       	sbrs	r0, 7
    1374:	fd cf       	rjmp	.-6      	; 0x1370 <TWI_sendSlaveAddWithWrite+0x16>
	
    // Check ACK = Master transmit ( slave address + Write request ) ACK
	while((TWSR & 0xF8) != 0x18);
    1376:	81 b1       	in	r24, 0x01	; 1
    1378:	88 7f       	andi	r24, 0xF8	; 248
    137a:	88 31       	cpi	r24, 0x18	; 24
    137c:	e1 f7       	brne	.-8      	; 0x1376 <TWI_sendSlaveAddWithWrite+0x1c>
}
    137e:	08 95       	ret

00001380 <TWI_sendSlaveAddWithRead>:


void TWI_sendSlaveAddWithRead(u8 slaveAdd)
{
	// Send slave address
	TWDR = slaveAdd<<1;
    1380:	88 0f       	add	r24, r24
    1382:	83 b9       	out	0x03, r24	; 3
	
	// Select read operation
	SET_BIT(TWDR,0);
    1384:	83 b1       	in	r24, 0x03	; 3
    1386:	81 60       	ori	r24, 0x01	; 1
    1388:	83 b9       	out	0x03, r24	; 3
	
	// Clear SC bit
	CLR_BIT(TWCR,5);
    138a:	86 b7       	in	r24, 0x36	; 54
    138c:	8f 7d       	andi	r24, 0xDF	; 223
    138e:	86 bf       	out	0x36, r24	; 54
	
	// Clear flag to start current job
	SET_BIT(TWCR,7);
    1390:	86 b7       	in	r24, 0x36	; 54
    1392:	80 68       	ori	r24, 0x80	; 128
    1394:	86 bf       	out	0x36, r24	; 54
	
	// Wait for the flag
	while(0 == GET_BIT(TWCR,7));
    1396:	06 b6       	in	r0, 0x36	; 54
    1398:	07 fe       	sbrs	r0, 7
    139a:	fd cf       	rjmp	.-6      	; 0x1396 <TWI_sendSlaveAddWithRead+0x16>
	
   	// Check ACK = Master transmit ( slave address + Read request ) ACK
	while((TWSR & 0xF8) != 0x40);
    139c:	81 b1       	in	r24, 0x01	; 1
    139e:	88 7f       	andi	r24, 0xF8	; 248
    13a0:	80 34       	cpi	r24, 0x40	; 64
    13a2:	e1 f7       	brne	.-8      	; 0x139c <TWI_sendSlaveAddWithRead+0x1c>
}
    13a4:	08 95       	ret

000013a6 <TWI_sendMasterDataByte>:


void TWI_sendMasterDataByte(u8 data)
{
	// Write Data into data register
	TWDR = data;
    13a6:	83 b9       	out	0x03, r24	; 3
	
	// Clear flag to start current job
	SET_BIT(TWCR,7);
    13a8:	86 b7       	in	r24, 0x36	; 54
    13aa:	80 68       	ori	r24, 0x80	; 128
    13ac:	86 bf       	out	0x36, r24	; 54
	
	// Wait for the flag
	while(0 == GET_BIT(TWCR,7));
    13ae:	06 b6       	in	r0, 0x36	; 54
    13b0:	07 fe       	sbrs	r0, 7
    13b2:	fd cf       	rjmp	.-6      	; 0x13ae <TWI_sendMasterDataByte+0x8>
	
	// Check ACK = Master transmit data ACK
	while((TWSR & 0xF8) != 0x28);
    13b4:	81 b1       	in	r24, 0x01	; 1
    13b6:	88 7f       	andi	r24, 0xF8	; 248
    13b8:	88 32       	cpi	r24, 0x28	; 40
    13ba:	e1 f7       	brne	.-8      	; 0x13b4 <TWI_sendMasterDataByte+0xe>
}
    13bc:	08 95       	ret

000013be <TWI_recieveMasterDataByte>:


u8 TWI_recieveMasterDataByte(void)
{
	// Clear flag to start current job
	SET_BIT(TWCR,7);
    13be:	86 b7       	in	r24, 0x36	; 54
    13c0:	80 68       	ori	r24, 0x80	; 128
    13c2:	86 bf       	out	0x36, r24	; 54
	
	// Wait for the flag
	while(0 == GET_BIT(TWCR,7));
    13c4:	06 b6       	in	r0, 0x36	; 54
    13c6:	07 fe       	sbrs	r0, 7
    13c8:	fd cf       	rjmp	.-6      	; 0x13c4 <TWI_recieveMasterDataByte+0x6>
	
	// Check ACK = Master received data with ACK
	while((TWSR & 0xF8) != 0x50);
    13ca:	81 b1       	in	r24, 0x01	; 1
    13cc:	88 7f       	andi	r24, 0xF8	; 248
    13ce:	80 35       	cpi	r24, 0x50	; 80
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <TWI_recieveMasterDataByte+0xc>
	
	// Read Data from data register
	return TWDR;
    13d2:	83 b1       	in	r24, 0x03	; 3
    13d4:	08 95       	ret

000013d6 <UART_init>:



void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
    13d6:	2a b1       	in	r18, 0x0a	; 10
    13d8:	28 61       	ori	r18, 0x18	; 24
    13da:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
    13dc:	20 b5       	in	r18, 0x20	; 32
    13de:	26 68       	ori	r18, 0x86	; 134
    13e0:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	aa 1f       	adc	r26, r26
    13ec:	bb 1f       	adc	r27, r27
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	aa 1f       	adc	r26, r26
    13f4:	bb 1f       	adc	r27, r27
    13f6:	9c 01       	movw	r18, r24
    13f8:	ad 01       	movw	r20, r26
    13fa:	22 0f       	add	r18, r18
    13fc:	33 1f       	adc	r19, r19
    13fe:	44 1f       	adc	r20, r20
    1400:	55 1f       	adc	r21, r21
    1402:	22 0f       	add	r18, r18
    1404:	33 1f       	adc	r19, r19
    1406:	44 1f       	adc	r20, r20
    1408:	55 1f       	adc	r21, r21
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	72 e1       	ldi	r23, 0x12	; 18
    140e:	8a e7       	ldi	r24, 0x7A	; 122
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 34 0a 	call	0x1468	; 0x1468 <__udivmodsi4>
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	82 0f       	add	r24, r18
    141a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
    141c:	da 01       	movw	r26, r20
    141e:	c9 01       	movw	r24, r18
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	a1 09       	sbc	r26, r1
    1424:	b1 09       	sbc	r27, r1
    1426:	89 2f       	mov	r24, r25
    1428:	9a 2f       	mov	r25, r26
    142a:	ab 2f       	mov	r26, r27
    142c:	bb 27       	eor	r27, r27
    142e:	80 bd       	out	0x20, r24	; 32
    1430:	08 95       	ret

00001432 <UART_RxChar>:
}

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
    1432:	5f 9b       	sbis	0x0b, 7	; 11
    1434:	fe cf       	rjmp	.-4      	; 0x1432 <UART_RxChar>
	return(UDR);			/* Return the byte*/
    1436:	8c b1       	in	r24, 0x0c	; 12
}
    1438:	08 95       	ret

0000143a <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
    143a:	5d 9b       	sbis	0x0b, 5	; 11
    143c:	fe cf       	rjmp	.-4      	; 0x143a <UART_TxChar>
	UDR = ch ;
    143e:	8c b9       	out	0x0c, r24	; 12
    1440:	08 95       	ret

00001442 <UART_SendString>:
}

void UART_SendString(char *str)
{
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	8c 01       	movw	r16, r24
	unsigned char j=0;
    144a:	c0 e0       	ldi	r28, 0x00	; 0

	while (str[j]!=0)		/* Send string till null */
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <UART_SendString+0x12>
	{
		UART_TxChar(str[j]);
    144e:	0e 94 1d 0a 	call	0x143a	; 0x143a <UART_TxChar>
		j++;
    1452:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;

	while (str[j]!=0)		/* Send string till null */
    1454:	f8 01       	movw	r30, r16
    1456:	ec 0f       	add	r30, r28
    1458:	f1 1d       	adc	r31, r1
    145a:	80 81       	ld	r24, Z
    145c:	81 11       	cpse	r24, r1
    145e:	f7 cf       	rjmp	.-18     	; 0x144e <UART_SendString+0xc>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret

00001468 <__udivmodsi4>:
    1468:	a1 e2       	ldi	r26, 0x21	; 33
    146a:	1a 2e       	mov	r1, r26
    146c:	aa 1b       	sub	r26, r26
    146e:	bb 1b       	sub	r27, r27
    1470:	fd 01       	movw	r30, r26
    1472:	0d c0       	rjmp	.+26     	; 0x148e <__udivmodsi4_ep>

00001474 <__udivmodsi4_loop>:
    1474:	aa 1f       	adc	r26, r26
    1476:	bb 1f       	adc	r27, r27
    1478:	ee 1f       	adc	r30, r30
    147a:	ff 1f       	adc	r31, r31
    147c:	a2 17       	cp	r26, r18
    147e:	b3 07       	cpc	r27, r19
    1480:	e4 07       	cpc	r30, r20
    1482:	f5 07       	cpc	r31, r21
    1484:	20 f0       	brcs	.+8      	; 0x148e <__udivmodsi4_ep>
    1486:	a2 1b       	sub	r26, r18
    1488:	b3 0b       	sbc	r27, r19
    148a:	e4 0b       	sbc	r30, r20
    148c:	f5 0b       	sbc	r31, r21

0000148e <__udivmodsi4_ep>:
    148e:	66 1f       	adc	r22, r22
    1490:	77 1f       	adc	r23, r23
    1492:	88 1f       	adc	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	1a 94       	dec	r1
    1498:	69 f7       	brne	.-38     	; 0x1474 <__udivmodsi4_loop>
    149a:	60 95       	com	r22
    149c:	70 95       	com	r23
    149e:	80 95       	com	r24
    14a0:	90 95       	com	r25
    14a2:	9b 01       	movw	r18, r22
    14a4:	ac 01       	movw	r20, r24
    14a6:	bd 01       	movw	r22, r26
    14a8:	cf 01       	movw	r24, r30
    14aa:	08 95       	ret

000014ac <__umulhisi3>:
    14ac:	a2 9f       	mul	r26, r18
    14ae:	b0 01       	movw	r22, r0
    14b0:	b3 9f       	mul	r27, r19
    14b2:	c0 01       	movw	r24, r0
    14b4:	a3 9f       	mul	r26, r19
    14b6:	70 0d       	add	r23, r0
    14b8:	81 1d       	adc	r24, r1
    14ba:	11 24       	eor	r1, r1
    14bc:	91 1d       	adc	r25, r1
    14be:	b2 9f       	mul	r27, r18
    14c0:	70 0d       	add	r23, r0
    14c2:	81 1d       	adc	r24, r1
    14c4:	11 24       	eor	r1, r1
    14c6:	91 1d       	adc	r25, r1
    14c8:	08 95       	ret

000014ca <_exit>:
    14ca:	f8 94       	cli

000014cc <__stop_program>:
    14cc:	ff cf       	rjmp	.-2      	; 0x14cc <__stop_program>
